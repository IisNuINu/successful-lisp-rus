#
# NuINu <don't@send.my>, 2020.
#
#. extracted from in/chapter03-02.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-19 13:50+0300\n"
"PO-Revision-Date: 2020-06-12 19:43+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in/chapter03-02.html:6
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html>\n"
"<head>\n"
"<title>Successful Lisp - Chapter 3, Lesson 2</title> \n"
"</head>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html>\n"
"<head>\n"
"<META http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n"
"<title>Successful Lisp - Chapter 3, Lesson 2</title> \n"
"</head>"

#: in/chapter03-02.html:9
msgid ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Chapter 3 - Essential Lisp in Twelve Lessons</h1> "
msgstr ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Глава 3 - Основы Лисп в 12 уроках</h1> "

#: in/chapter03-02.html:11
msgid "<h2><A NAME=\"lesson-2\">Lesson 2 - Essential Evaluation</A></h2> "
msgstr "<h2><A NAME=\"lesson-2\">Урок 2 - Основы Выполнения</A></h2> "

#: in/chapter03-02.html:13
msgid "<h3>A form is meant to be evaluated</h3> "
msgstr "<h3>Форма предназначена для оценки/вычисления(evaluate)</h3> "

#: in/chapter03-02.html:19
msgid ""
"<P>A <A NAME=\"form\">form</A> can be either an <A \n"
"HREF=\"chapter03-01.html#atom\">atom</A> or a <A \n"
"HREF=\"chapter03-01.html#list\">list</A>.  The important thing is that the "
"form is \n"
"meant to be <A NAME=\"evaluated\">evaluated</A>.  Evaluation has a fairly \n"
"technical definition that we'll gradually expose in this section.</P>"
msgstr ""
"<P>\n"
"<A NAME=\"form\">Форма</A> может быть либо <A HREF=\"chapter03-01.html#atom"
"\">атомом</A>,\n"
"либо <A HREF=\"chapter03-01.html#list\">списком</A>. Важно то, что форма "
"предназначена \n"
"для <A NAME=\"evaluated\">оценки/вычисления</A>. Вычисление имеет довольно "
"техническое определение, которое мы будем постепенно раскрывать в этом "
"разделе.\n"
"</P>"

#: in/chapter03-02.html:26
msgid ""
"<P>Evaluation is simple if the form is an atom.  Lisp treats the atom as a \n"
"name, and retrieves the value for the name (if a value exists).  You \n"
"probably wonder why I'm avoiding the more direct explanation of calling "
"the \n"
"atom a variable.  The reason is that the atom can have either a variable \n"
"value or a constant value.  And the atom's value can be constant for a \n"
"couple of reasons.</P>"
msgstr ""
"<P>Оценка/Вычисление тривиально, если форма является атомом. Lisp "
"обрабатывает\n"
"атом как имя и извлекает значение для этого имени (если оно существует). "
"Вы, \n"
"вероятно, удивляетесь, почему я избегаю более прямого объяснения, называя \n"
"атом переменной. Причина в том, что атом может иметь как переменное, \n"
"так и постоянное значение. А значение атома может быть постоянным по \n"
"нескольким причинам.</P>"

#: in/chapter03-02.html:30
msgid ""
"<P>A number is an atom.  (Its value is constant for obvious reasons.)  "
"Lisp \n"
"does not <EM>store</EM> a value for a number -- the number is said to be \n"
"self-evaluating.</P>"
msgstr ""
"<P>\n"
"Число - это атом. (Его значение постоянно по понятным причинам.) Lisp \n"
"не <EM>хранит</EM> значение для числа - число, как говорят, "
"самовычисляемо. \n"
"</P>"

#: in/chapter03-02.html:37
msgid ""
"<BLOCKQUOTE>\n"
"We're going to introduce a new term without a complete definition.  For \n"
"now, think of a <EM>symbol</EM> as an atom that can have a value.  We'll \n"
"look at symbols in greater detail when we get to <A \n"
"HREF=\"chapter03-05.html\">Lesson 5</A>.\n"
"</BLOCKQUOTE>"
msgstr ""
"<BLOCKQUOTE>\n"
"Мы собираемся ввести новый термин без полного определения. А пока думайте \n"
"о  <EM>символе</EM> как об атоме, который может иметь значение. Мы "
"рассмотрим\n"
"символы более подробно, когда перейдем к <A HREF=\"chapter03-05.html\">уроку "
"5</A>.\n"
"</BLOCKQUOTE>"

#: in/chapter03-02.html:41
msgid ""
"<P>A symbol defined in a <CODE>defconstant</CODE> form has a constant \n"
"value.  Lisp will store the value as if the atom had a variable value, and \n"
"add a note to the effect that the value is not allowed to change.</P>"
msgstr ""
"<P>\n"
"Символ, определенный в форме <CODE>defconstant</CODE>, имеет постоянное\n"
"значение. Lisp сохранит значение, как если бы у атома было переменное\n"
"значение, и добавит заметку о том, что это значение не может быть изменено.\n"
"</P>"

#: in/chapter03-02.html:47
msgid ""
"<P>A symbol in the <CODE>KEYWORD</CODE> package is self-evaluating.  We'll \n"
"look at packages in detail in <A HREF=\"chapter31.html\">Chapter 31</A>.  "
"For \n"
"now, all you need to know is that a symbol beginning with the <CODE>:</"
"CODE> \n"
"character (called the package prefix) is a keyword symbol.  Keyword \n"
"symbols have themselves as their values.</P>"
msgstr ""
"<P>\n"
"Символ в пакете <CODE>KEYWORD</CODE>(ключевых) слов является "
"самовычисляемым. \n"
"Мы подробно рассмотрим пакеты в <A HREF=\"chapter31.html\">главе 31</A>. \n"
"На данный момент все, что вам нужно знать, это то, что символ, начинающийся "
"с \n"
"символьного знака <CODE>:</CODE> (называемого префиксом пакета), \n"
"является символом ключевым словом. Символы ключевые слова  имеют \n"
"сами себя в качестве своих значений.\n"
"</P>"

#: in/chapter03-02.html:56
msgid ""
"<P>A symbol can get a variable value in many different ways.  Lisp "
"actually \n"
"keeps several different values for a symbol.  One has the traditional \n"
"meaning as the value of the symbol taken as a variable.  Another has \n"
"meaning as the symbol's function.  Still others keep track of the symbol's \n"
"documentation, its printed representation, and properties that the \n"
"programmer chooses to associate with the symbol.  We'll explore some of \n"
"these in more detail in <A HREF=\"chapter03-05.html\">Lesson 5</A>, <A \n"
"HREF=\"chapter03-06.html\">Lesson 6</A>, and <A HREF=\"chapter03-07.html"
"\">Lesson 7</A>.</P>"
msgstr ""
"<P>\n"
"Символ может получить значение переменной многими различными способами. \n"
"Лисп на самом деле хранит несколько различных значений для символа. \n"
"Одно из них имеет традиционное значение как значение символа, взятого в \n"
"качестве переменной. Другое имеет значение как функция символа. Третье \n"
"следит за документацией символа, его печатным представлением и свойствами\n"
"(properties), которые программист выбирает для ассоциации с символом. \n"
"Некоторые из них мы рассмотрим более подробно на \n"
"<A HREF=\"chapter03-05.html\">Уроке 5</A>, <A HREF=\"chapter03-06.html"
"\">Уроке 6</A> \n"
"и <A HREF=\"chapter03-07.html\">уроке 7</A>.\n"
"</P>"

#: in/chapter03-02.html:64
msgid ""
"<P>If a form is a list, then the first element must be either a symbol or "
"a \n"
"special form called a lambda expression.  (We won't look at lambda \n"
"expressions for a while.)  The symbol must name a function.  In Lisp, the \n"
"<EM>symbols</EM> <CODE>+</CODE>, <CODE>-</CODE>, <CODE>*</CODE>, and \n"
"<CODE>/</CODE> name the four common arithmetic operations: addition, \n"
"subtraction, multiplication, and division.  Each of these symbols has an \n"
"associated function that performs the arithmetic operation.</P>"
msgstr ""
"<P>\n"
"Если форма-это список, то первый элемент должен быть либо символом, \n"
"либо специальной формой, называемой лямбда-выражением. (Некоторое время \n"
"мы не будем рассматривать лямбда-выражения.) Символ должен давать имя "
"функции. \n"
"В Lisp <EM>символы</EM> <CODE>+</CODE>, <CODE>-</CODE>, <CODE>*</CODE> "
"обозначают\n"
"четыре общие арифметические операции: сложение, вычитание, умножение и "
"деление. \n"
"Каждый из этих символов имеет соответствующую функцию, которая выполняет \n"
"арифметическую операцию.\n"
"</P>"

#: in/chapter03-02.html:71
msgid ""
"<P>So when Lisp evaluates the form <CODE>(+ 2 3)</CODE>, it applies the \n"
"function for addition to the arguments <CODE>2</CODE> and <CODE>3</CODE>, \n"
"giving the expected result <CODE>5</CODE>.  Notice how the function "
"symbol, \n"
"<CODE>+</CODE>, precedes its arguments.  This is <EM>prefix</EM> \n"
"notation.  Any time you see a list, look to its first element to find out \n"
"what Lisp will do to evaluate the list as a form.</P>"
msgstr ""
"<P>\n"
"Поэтому, когда Lisp вычисляет форму <CODE>(+ 2 3)</CODE>, он применяет "
"функцию сложения \n"
"к аргументам <CODE>2</CODE> и <CODE>3</CODE>, давая ожидаемый результат "
"<CODE>5</CODE>. \n"
"Обратите внимание, что \n"
"символ функции ,<CODE>+</CODE>, предшествует ее аргументам. Это \n"
"<EM>prefix/префиксная</EM> нотация. \n"
"Каждый раз, когда вы видите список, посмотрите на его первый элемент, \n"
"чтобы узнать, что Лисп будет делать, чтобы вычислить/оценить список \n"
"как форму.\n"
"</P>"

#: in/chapter03-02.html:73
msgid "<h3>A function is applied to its arguments</h3> "
msgstr "<h3>Функция применяется к своим аргументам</h3> "

#: in/chapter03-02.html:77
msgid ""
"<P>Lisp, when given a list to evaluate, treats the form as a function "
"call.  \n"
"We'll be looking a lot at Lisp evaluation from now on, so we'll use some \n"
"visual aids to identify the input to Lisp and its responses:</P>"
msgstr ""
"<P>Lisp, когда ему дается список для вычисления, рассматривает форму как\n"
"вызов функции. С этого момента мы будем видеть много Lisp вычислений, \n"
"поэтому мы будем использовать некоторые визуальные средства для "
"определения \n"
"входных данных для Lisp и его ответов:</P>"

#: in/chapter03-02.html:79
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"the Lisp prompt precedes input to Lisp<br><IMG SRC=\"gifs/right-arrow.gif\" "
"ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> result of Lisp evaluation</PRE>"
msgstr ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> \n"
"он предшествует строке ввода Lisp<br>\n"
"<IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> результат "
"вычисления Lisp\n"
"</PRE>"

#: in/chapter03-02.html:81
msgid "<P>For example:</P>"
msgstr "<P>Например:</P>"

#: in/chapter03-02.html:83
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(+ 4 9)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"13<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (- 5 "
"7)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"-2<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (* 3 "
"9)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"27<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (/ "
"15.0 2)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"7.5</PRE>"
msgstr ""

#: in/chapter03-02.html:88
msgid ""
"<P>In each case above, the evaluated form is a list.  Its first \n"
"element is a symbol, which names a function.  The remaining elements are \n"
"<EM>arguments</EM> of the function.  Here, the arguments are all numbers, \n"
"and we know that numbers are self-evaluating.</P>"
msgstr ""
"<P>\n"
"В каждом приведенном выше случае вычисляемая форма представляет собой "
"список. \n"
"Его первый элемент-это символ, который именует функцию. Остальные элементы \n"
"являются <EM>аргументами</EM> функции. Здесь все аргументы-это числа, и мы "
"знаем, \n"
"что числа-являются самовычисляемыми.\n"
"</P>"

#: in/chapter03-02.html:90
msgid "<P>Here are a few more examples:</P>"
msgstr "<P>Вот еще несколько примеров:</P>"

#: in/chapter03-02.html:92
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(atom 123)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM"
"\"> T<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(numberp 123)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> T<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN="
"\"BOTTOM\"> (atom :foo)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" "
"ALIGN=\"BOTTOM\"> T<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN="
"\"BOTTOM\"> (numberp :foo)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;"
"\" ALIGN=\"BOTTOM\"> NIL</PRE>"
msgstr ""

#: in/chapter03-02.html:99
msgid ""
"<P><CODE>ATOM</CODE> and <CODE>NUMBERP</CODE> are predicates.  Predicates \n"
"return a true or false value.  <CODE>NIL</CODE> is the only false value in \n"
"Lisp -- everything else is true.  Unless a predicate has a more useful \n"
"value to return, it conventionally returns <CODE>T</CODE> to mean true.  \n"
"<CODE>ATOM</CODE> returns <code>T</code> if its one argument is a Lisp "
"atom.  \n"
"<CODE>NUMBERP</CODE> returns <code>T</code> if its argument is a number.</P>"
msgstr ""
"<P><CODE>ATOM</CODE> и <CODE>NUMBERP</CODE>  - это предикаты. Предикаты \n"
"возвращают значение true или false. NIL-это единственное ложное значение в "
"Lisp , \n"
"все остальное-правда. Если предикат не имеет более полезного значения для "
"возврата, \n"
"он обычно возвращает <CODE>T</CODE>, чтобы означать true. <CODE>ATOM</"
"CODE> \n"
"возвращает <code>T</code>, если его единственным аргументом является атом "
"Lisp. \n"
"<CODE>NUMBERP</CODE> возвращает значение <code>T</code>, если его "
"аргументом \n"
"является число.\n"
"</P>"

#: in/chapter03-02.html:105
msgid ""
"<P>To evaluate each of the above forms, Lisp first evaluates the arguments \n"
"(from left to right), then evaluates the first element to get its "
"function, \n"
"then applies the function to the arguments.  With only a handful of \n"
"exceptions, which we'll learn about at the end of this lesson, Lisp always \n"
"does the same thing to evaluate a list form:</P>"
msgstr ""
"<P>Чтобы вычислить каждую из вышеперечисленных форм, Lisp сначала вычисляет\n"
"аргументы (слева направо), затем вычисляет первый элемент, чтобы получить \n"
"его функцию, а затем применяет функцию к аргументам. За редким "
"исключением, \n"
"о котором мы узнаем в конце этого урока, Lisp всегда делает то же самое \n"
"для вычисления формы списка:</P>"

#: in/chapter03-02.html:111
msgid ""
"<A NAME=\"basic-eval\"><OL>\n"
"<LI>Evaluate the arguments, from left to right.</LI>\n"
"<LI>Get the function associated with the first element.</LI>\n"
"<LI>Apply the function to the arguments.</LI>\n"
"</OL></A>"
msgstr ""
"<A NAME=\"basic-eval\"><OL>\n"
"<LI>Вычисляются аргументы слева направо.</LI>\n"
"<LI>Получают функцию, связанную с первым элементом.</LI>\n"
"<LI>Применяют функцию к аргументам.</LI>\n"
"</OL></A>"

#: in/chapter03-02.html:114
msgid ""
"<P>Remember that an atom can also be a Lisp form. When given an atom to \n"
"evaluate, Lisp simply returns its value:</P>"
msgstr ""
"<P>Помните, что атом также может быть Лисп формой. Когда дается Атом для \n"
"вычисления, Lisp просто возвращает его значение:</P>"

#: in/chapter03-02.html:116
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"17.95<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"17.95<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> :A-"
"KEYWORD<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM"
"\"> :A-KEYWORD<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN="
"\"BOTTOM\"> *FEATURES*<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" "
"ALIGN=\"BOTTOM\"> (:ANSI-CL :CLOS :COMMON-LISP)<br><br><IMG SRC=\"gifs/"
"circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> \"Hello, world!\"<br><IMG SRC="
"\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> \"Hello, world!"
"\"<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> WHAT-"
"IS-THIS?<br><IMG SRC=\"gifs/right-arrow-bar.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> Error: Unbound variable</PRE>"
msgstr ""

#: in/chapter03-02.html:120
msgid ""
"<P>Numbers and keywords are self-evaluating.  So are strings.  The \n"
"<CODE>*FEATURES*</CODE> variable is predefined by Lisp -- your system will \n"
"probably return a different value.</P>"
msgstr ""
"<P>\n"
"Цифры и ключевые слова - самовычисляются. Как и строки. Переменная \n"
"<CODE>*FEATURES*</CODE> предопределена в Lisp - ваша система, вероятно, \n"
"вернет другое значение.\n"
"</P>"

#: in/chapter03-02.html:128
msgid ""
"<P>The symbol <CODE>WHAT-IS-THIS?</CODE> doesn't have a value, because "
"it's \n"
"not predefined by Lisp, and I haven't given it a value.  The system \n"
"responds with an error message, rather than a value.  We mark the message \n"
"with <IMG SRC=\"gifs/right-arrow-bar.gif\" ALT=\"-&gt;|\" ALIGN=\"BOTTOM"
"\"> \n"
"rather than the <IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> \n"
"marker we use for successful evaluations. Your system will probably print \n"
"a different message.</P>"
msgstr ""
"<P>\n"
"Символ - <CODE>WHAT-IS-THIS?</CODE> не имеет значения, потому что он не \n"
"предопределен Lisp, и я не задал ему значения. Система отвечает сообщением \n"
"об ошибке, а не значением. Мы помечаем сообщение знаком \n"
"<IMG SRC=\"gifs/right-arrow-bar.gif\" ALT=\"-&gt;|\" ALIGN=\"BOTTOM\">, а не "
"маркером \n"
"<IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\">, который "
"мы \n"
"используем при успешном вычислении. Ваша система, вероятно, напечатает \n"
"другое сообщение.\n"
"</P>"

#: in/chapter03-02.html:130
msgid "<h3>A function can return any number of values</h3> "
msgstr "<h3>Функция может возвращать любое количество значений</h3> "

#: in/chapter03-02.html:136
msgid ""
"<P>Sometimes you'd like to have a function return several values. For \n"
"example, a function which looks up a database entry might return both the \n"
"desired result and a completion status code. One way to do this is to \n"
"pass to the function a location for one of the results; this is possible, \n"
"but <STRONG>very</STRONG> uncommon for a Lisp program.</P>"
msgstr ""
"<P>\n"
"Иногда вы хотите, чтобы функция возвращала несколько значений. Например, "
"функция, \n"
"которая ищет запись базы данных, может возвращать как желаемый результат, \n"
"так и код состояния завершения. Один из способов сделать это-передать "
"функции\n"
"местоположение для одного из результатов; это возможно, но <STRONG>очень</"
"STRONG> редко \n"
"для программы Lisp.\n"
"</P>"

#: in/chapter03-02.html:144
msgid ""
"<P>Another approach creates a single return value to combine both the \n"
"result and the status code.  Lisp gives you several different ways to do \n"
"this, including <A HREF=\"chapter03-10.html#structures\">structures</A>.  \n"
"Experienced Lisp programmers don't do this when the created value will "
"just \n"
"be taken apart into its components and then forgotten, since the composite \n"
"value then becomes garbage (see <A HREF=\"chapter29.html\">Chapter 29</A>) \n"
"that eventually slows down the operation of the program.</P>"
msgstr ""
"<P>\n"
"Другой подход создает одно возвращаемое значение объединяя оба значения, \n"
"как результат, так и код состояния. Lisp дает вам несколько различных \n"
"способов вернуть результ, включая возврат \n"
"<A HREF=\"chapter03-10.html#structures\">структуры(structures)</A>. \n"
"Опытные программисты на Лиспе не делают так, когда созданное для\n"
"возврата значение будет просто разбито на его компоненты, а затем забыто, \n"
"так как составное значение тогда становится мусором \n"
"(см. <A HREF=\"chapter29.html\">Главу 29</A>), что в конечном итоге \n"
"замедляет работу программы.\n"
"</P>"

#: in/chapter03-02.html:150
msgid ""
"<P>The right way to return multiple values from a function is to use the \n"
"<CODE>VALUES</CODE> form.  We'll see <A \n"
"HREF=\"chapter03-09.html\"><CODE>VALUES</CODE> used in the context of a \n"
"function</A> in a little while.  For now, let's see what happens when Lisp \n"
"evaluates a <CODE>VALUES</CODE> form:</P>"
msgstr ""
"<P>\n"
"Правильный способ вернуть несколько значений из функции - это использовать \n"
"форму <CODE>VALUES</CODE>. Через некоторое время мы увидим форму\n"
"<A HREF=\"chapter03-09.html\"><CODE>VALUES</CODE>, используемую в "
"контексте \n"
"функции</A>. А пока давайте посмотрим, что происходит, когда Lisp "
"вычисляет \n"
"форму <CODE>VALUES</CODE>:\n"
"</P>"

#: in/chapter03-02.html:153
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(values 1 2 3 :hi \"Hello\")<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;"
"\" ALIGN=\"BOTTOM\"> 1<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" "
"ALIGN=\"BOTTOM\"> 2<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> 3<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> :HI\n"
"<IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> \"Hello\"</"
"PRE>"
msgstr ""

#: in/chapter03-02.html:159
msgid ""
"<P>Notice how Lisp returned a value (following the <IMG \n"
"SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> indicator) "
"for \n"
"<EM>each</EM> argument to the <CODE>VALUES</CODE> form.  My Lisp system \n"
"represents this by printing each value on a new line; yours may separate \n"
"the values some other way.</P>"
msgstr ""
"<P>\n"
"Обратите внимание, как Lisp возвращает значение (после индикатора \n"
"<IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\">) для "
"<EM>каждого</EM> \n"
"аргумента в форме <CODE>VALUES</CODE>. Моя система Lisp представляет это, \n"
"печатая каждое значение в новой строке; ваша может отделить значения \n"
"каким-то другим способом.\n"
"</P>"

#: in/chapter03-02.html:161
msgid "<h3>Arguments are usually not modified by a function</h3> "
msgstr "<h3>Аргументы обычно не изменяются функцией</h3> "

#: in/chapter03-02.html:166
msgid ""
"<P>I mentioned earlier that you can pass a location to a function, and "
"have \n"
"the function change the location's value.  This is a <EM>very</EM> "
"uncommon \n"
"practice for a Lisp program, even though other languages make it part of "
"their \n"
"standard repertoire.</P>"
msgstr ""
"<P>\n"
"Я уже упоминал ранее, что вы можете передать в функцию местоположение и \n"
"заставить ее изменить значение местоположения. Это <EM>очень</EM> "
"необычная \n"
"практика для программы Lisp, хотя другие языки делают ее частью своего \n"
"стандартного репертуара.\n"
"</P>"

#: in/chapter03-02.html:176
msgid ""
"<P>You could specify the location to be modified as either a non-keyword \n"
"symbol or a composite value -- obviously, you can't modify a constant.  If \n"
"you provide a symbol, then your function must execute code to give the \n"
"symbol a new value.  If you provide a composite data structure, your \n"
"function must execute code to change the correct piece of the composite \n"
"value.  It's harder to write Lisp code to do this, and it's harder to \n"
"understand programs written this way.  So Lisp programmers usually write \n"
"functions that get their inputs from parameters, and produce their outputs \n"
"as the function result.</P>"
msgstr ""
"<P>\n"
"Вы можете указать местоположение, которое будет изменено, как обычный "
"символ, а \n"
"не ключевое слово или составное значение - очевидно, вы не можете изменить "
"константу. \n"
"Если вы предоставляете символ, то ваша функция должна выполнить код, который "
"даст \n"
"символу новое значение. Если вы предоставляете составную структуру данных, \n"
"ваша функция должна выполнить код, чтобы изменить правильный фрагмент \n"
"составного значения. Для этого труднее написать Лисп-код, и труднее понять \n"
"программы, написанные таким образом. Таким образом, программисты Lisp "
"обычно \n"
"пишут функции,  которые получают свои входные данные из параметров и "
"производят \n"
"свои  выходные данные в качестве результата функции.\n"
"</P>"

#: in/chapter03-02.html:178
msgid "<h3>Arguments are usually evaluated before function application</h3> "
msgstr "<h3>Аргументы обычно вычисляются перед применением функции</h3> "

#: in/chapter03-02.html:184
msgid ""
"<P>When Lisp evaluates a function, it always evaluates all the arguments \n"
"first, as we saw <A HREF=\"#basic-eval\">earlier</A>.  Unfortunately, "
"every \n"
"rule has exceptions, and this rule is no exception (as we'll soon see)...  \n"
"The problem is not that Lisp doesn't always evaluate a function's \n"
"arguments, but that not every list form is a function call.</P>"
msgstr ""
"<P>\n"
"Когда Lisp вычисляет функцию, он всегда сначала вычисляет все аргументы, \n"
"как мы видели <A HREF=\"#basic-eval\">ранее</A>. К сожалению, каждое правило "
"имеет исключения, и это правило не является исключением (как мы вскоре "
"увидим)... \n"
"Проблема не в том, что Lisp не всегда вычисляет аргументы функции, а в "
"том, \n"
"что не каждая форма списка является вызовом функции.\n"
"</P>"

#: in/chapter03-02.html:186
msgid "<h3>Arguments are evaluated in left-to-right order</h3> "
msgstr "<h3>Аргументы вычисляются в порядке слева направо</h3> "

#: in/chapter03-02.html:191
msgid ""
"<P>When a list form <EM>is</EM> a function call, its arguments are always \n"
"evaluated in order, from left to right.  As in other programming \n"
"languages, it's in poor taste to rely on this, but if you absolutely have \n"
"to rely on the order, it's good to know that Lisp defines it for you.</P>"
msgstr ""
"<P>\n"
"Когда форма списка <EM>является</EM> вызовом функции, ее аргументы всегда \n"
"вычисляются по порядку слева направо. Как и в других языках "
"программирования, \n"
"полагаться на это-дурной тон, но если вы абсолютно должны полагаться \n"
"на порядок, то хорошо знать, что Lisp определяет его для вас.\n"
"</P>"

#: in/chapter03-02.html:193
msgid "<h3>Special forms and macros change argument evaluation</h3> "
msgstr ""
"<h3>Специальные формы и макросы изменяют оценку/вычисление аргументов</h3> "

#: in/chapter03-02.html:200
msgid ""
"<P>So if a list form isn't always a function call, what else can it be?  \n"
"There are two cases, but the result is the same: some arguments are \n"
"evaluated, and some aren't.  Which is which depends upon the form and \n"
"nothing else.  You'll just have to learn the exceptions.  Fortunately, "
"most \n"
"Lisp systems will show you the online documentation for any form with just \n"
"a keystroke or two.</P>"
msgstr ""
"<P>\n"
"Итак, если форма списка не всегда является вызовом функции, то чем еще \n"
"она может быть? Есть два случая, но результат один и тот же: одни "
"аргументы \n"
"вычисляются, а другие - нет. Вам просто придется изучить исключения. К "
"счастью, \n"
"большинство систем Lisp покажет вам онлайн - документацию для любой формы \n"
"с помощью одного или двух нажатий клавиш.\n"
"</P>"

#: in/chapter03-02.html:210
msgid ""
"<P>There are two kinds of forms that don't evaluate all of their "
"arguments: \n"
"special forms and macros.  Lisp predefines a small number of special "
"forms.  \n"
"You can't add your own special forms -- they're primitive features of the \n"
"language itself.  Lisp also defines quite a few macros.  You can also \n"
"define your own macros.  Macros in Lisp let you use the full power of the \n"
"language to add your own features.  Later in this chapter we'll look \n"
"briefly at <A HREF=\"chapter03-08.html\">how to define simple macros</A>.  "
"In <A \n"
"HREF=\"chapter20.html\">Chapter 20</A> we'll cover topics surrounding the \n"
"creation of more complex macros.</P>"
msgstr ""
"<P>\n"
"Есть два вида форм, которые не вычисляют все свои аргументы: специальные "
"формы \n"
"и макросы. Лисп предопределяет небольшое количество специальных форм. \n"
"Вы не можете добавить свои собственные специальные формы - эти \n"
"примитивы являются особенностью самого языка. Lisp также определяет \n"
"довольно много макросов. Вы также можете определить свои собственные "
"макросы. \n"
"Макросы в Lisp позволяют использовать всю мощь языка для добавления \n"
"собственной функциональности. Далее в этой главе мы кратко рассмотрим, \n"
"<A HREF=\"chapter03-08.html\">как определить простые макросы</A>. В \n"
"<A HREF=\"chapter20.html\">главе 20</A> мы рассмотрим темы, связанные с \n"
"созданием более сложных макросов.\n"
"</P>"

#: in/chapter03-02.html:226
msgid ""
"<hr>\n"
"<div align=\"center\">\n"
"<a href=\"contents.html\">Contents</a> | <a href=\"cover.html\">Cover</a> "
"<br> \n"
"<a href=\"chapter02.html\">Chapter 2</a> | <A HREF=\"chapter03.html"
"\">Chapter 3, Introduction</A> | <A HREF=\"chapter03-01.html\">Chapter 3, "
"Lesson 1</A> | Chapter 3, Lesson 2 | <A HREF=\"chapter03-03.html\">Chapter "
"3, Lesson 3</A> | <a href=\"chapter04.html\">Chapter 4</a> <br>\n"
"</div>\n"
"<hr>\n"
"<address>\n"
"Copyright &copy; 1995-2001, David B. Lamkins<br>\n"
"All Rights Reserved Worldwide<br>\n"
"<br>\n"
"This book may not be reproduced without the written consent of its \n"
"author.  Online distribution is restricted to the author's site.\n"
"</address> \n"
"</body>\n"
"</html>"
msgstr ""
