#
# NuINu <don't@send.my>, 2020.
#
#. extracted from in/chapter03-03.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-19 13:50+0300\n"
"PO-Revision-Date: 2020-06-12 19:43+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in/chapter03-03.html:5
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html><head>\n"
"<title>Successful Lisp - Chapter 3, Lesson 3</title> \n"
"</head> "
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html><head>\n"
"<META http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n"
"<title>Successful Lisp - Chapter 3, Lesson 3</title> \n"
"</head> "

#: in/chapter03-03.html:7
msgid ""
"<body bgcolor=\"white\" text=\"black\"><h1>Chapter 3 - Essential Lisp in "
"Twelve Lessons</h1> "
msgstr ""
"<body bgcolor=\"white\" text=\"black\"><h1>Глава 3 - Основы Лисп в 12 "
"уроках</h1> "

#: in/chapter03-03.html:9
msgid ""
"<h2><A NAME=\"lesson-3\">Lesson 3 - Some Examples of Special Forms and "
"Macros</A></h2> "
msgstr ""
"<h2><A NAME=\"lesson-3\">>Урок 3 - Некоторые примеры специальных форм и "
"макросов</A></h2> "

#: in/chapter03-03.html:14
msgid ""
"<P>Now we'll look at several special forms and macros.  Over the next four \n"
"lessons, we'll build up a repertoire that will let you write simple \n"
"functions using the most elementary Lisp data type, the list.  Later \n"
"chapters will cover more complex program structures and data types.</P>"
msgstr ""
"<P>\n"
"Теперь мы рассмотрим несколько специальных форм и макросов. В течение "
"следующих \n"
"четырех уроков мы создадим репертуар, который позволит вам писать простые "
"функции,\n"
"используя самый элементарный тип данных Lisp - список. Более поздние главы \n"
"будут посвящены более сложным структурам программ и типам данных.\n"
"</P>"

#: in/chapter03-03.html:16
msgid "<h3>SETQ</h3> "
msgstr ""

#: in/chapter03-03.html:19
msgid ""
"<P>Earlier, I told you that Lisp evaluates a symbol form by retrieving its \n"
"variable value.  <CODE>SETQ</CODE> gives you a way to set that value:</P>"
msgstr ""
"<P>\n"
"Ранее я уже говорил вам, что Lisp вычисляет форму символа, извлекая его\n"
"переменное значение. <CODE>SETQ</CODE> дает вам возможность установить \n"
"это значение:\n"
"</P>"

#: in/chapter03-03.html:21
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(setq my-name \"David\")<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" "
"ALIGN=\"BOTTOM\"> \"David\"<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?"
"\" ALIGN=\"BOTTOM\"> my-name<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;"
"\" ALIGN=\"BOTTOM\"> \"David\"<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT="
"\"?\" ALIGN=\"BOTTOM\"> (setq a-variable 57)<br><IMG SRC=\"gifs/right-arrow."
"gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> 57<br><br><IMG SRC=\"gifs/circle-dot."
"gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> a-variable<br><IMG SRC=\"gifs/right-arrow."
"gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> 57<br><br><IMG SRC=\"gifs/circle-dot."
"gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (setq a-variable :a-keyword)<br><IMG SRC="
"\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> :A-KEYWORD</PRE>"
msgstr ""

#: in/chapter03-03.html:25
msgid ""
"<P><CODE>SETQ</CODE>'s first argument is a symbol.  This is not "
"evaluated.  \n"
"The second argument is assigned as the variable's value.  \n"
"<CODE>SETQ</CODE> returns the value of its last argument.</P>"
msgstr ""
"<P>\n"
"Первый аргумент <CODE>SETQ</CODE> - это символ. Он не вычисляется. \n"
"Второй аргумент присваивается в качестве значения переменной. \n"
"<CODE>SETQ</CODE> возвращает значение своего последнего аргумента.\n"
"</P>"

#: in/chapter03-03.html:31
msgid ""
"<BLOCKQUOTE>\n"
"<CODE>SETQ</CODE> doesn't evaluate its first argument because you want to \n"
"assign a value to the symbol itself.  If <CODE>SETQ</CODE> evaluated its "
"first argument, the <EM>value</EM> of \n"
"that argument would have to be a symbol.  The <CODE>SET</CODE> form does \n"
"this.  Pay particular attention to the difference between the <CODE>SET</"
"CODE> and <CODE>SETQ</CODE> forms in the following example, and make sure "
"you understand what's happening with the <CODE>(set var-1 99)</CODE> form:"
msgstr ""
"<BLOCKQUOTE>\n"
"<CODE>SETQ</CODE> не вычисляет свой первый аргумент, потому что вы хотите \n"
"присвоить значение самому символу. Если <CODE>SETQ</CODE> вычисляет свой \n"
"первый аргумент, то <EM>значение</EM> этого аргумента должно быть "
"символом. \n"
"Это делает форма <CODE>SET</CODE>. Обратите особое внимание на разницу "
"между \n"
"формами <CODE>SET</CODE> и <CODE>SETQ</CODE> в следующем примере и "
"убедитесь, что вы понимаете, что происходит с формой <CODE>(set var-1 99)</"
"CODE> :\n"

#: in/chapter03-03.html:33
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(setq var-1 'var-2)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> VAR-2<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN="
"\"BOTTOM\"> var-1<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> VAR-2<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN="
"\"BOTTOM\"> var-2<br><IMG SRC=\"gifs/right-arrow-bar.gif\" ALT=\"-&gt;|\" "
"ALIGN=\"BOTTOM\"> Error: Unbound variable<br><br><IMG SRC=\"gifs/circle-dot."
"gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (set var-1 99)<br><IMG SRC=\"gifs/right-"
"arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> 99<br><br><IMG SRC=\"gifs/circle-"
"dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> var-1<br><IMG SRC=\"gifs/right-arrow."
"gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> VAR-2<br><br><IMG SRC=\"gifs/circle-"
"dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> VAR-2<br><IMG SRC=\"gifs/right-arrow."
"gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> 99</PRE>"
msgstr ""

#: in/chapter03-03.html:38
msgid ""
"<P>Did you notice the <CODE>'</CODE> in the first form?  This keeps the \n"
"following form, <CODE>var-2</CODE>, from being evaluated.  Later in this \n"
"lesson, when we look at <A HREF=\"#quote\"><CODE>QUOTE</CODE></A>, I'll \n"
"explain this in greater detail.</P>"
msgstr ""
"<P>\n"
"Вы обратили внимание на <CODE>'</CODE> в первой форме? Она(кавычка) \n"
"удерживает следующую форму <CODE>var-2</CODE> от вычисления. \n"
"Позже в этом уроке, когда мы рассмотрим <A HREF=\"#quote\"><CODE>QUOTE</"
"CODE></A>, \n"
"я объясню ее более подробно.\n"
"</P>"

#: in/chapter03-03.html:45
msgid ""
"<P>In the example, we first make the value of <CODE>VAR-1</CODE> be the \n"
"<EM>symbol</EM> <CODE>VAR-2</CODE>.  Checking the value of \n"
"<CODE>VAR-2</CODE>, we find that it has none.  Next, we use \n"
"<CODE>SET</CODE> (not <CODE>SETQ</CODE>) to assign the value \n"
"<CODE>99</CODE> to the symbol, <CODE>VAR-2</CODE>, which is the \n"
"<EM>value</EM> of <CODE>VAR-1</CODE>.</P>"
msgstr ""
"<P>\n"
"В этом примере мы сначала делаем значением <CODE>VAR-1</CODE>  \n"
"<EM>символом(symbol)</EM> <CODE>VAR-2</CODE>.  Проверяя значение\n"
"<CODE>VAR-2</CODE>, мы обнаруживаем, что он(символ) не имеет никакого\n"
"значения.  Затем мы используем <CODE>SET</CODE> (а не <CODE>SETQ</CODE>) \n"
"чтобы присвоить значение <CODE>99</CODE> символу <CODE>VAR-2</CODE>, "
"который\n"
"является <EM>значением</EM> для символа <CODE>VAR-1</CODE>.\n"
"</P>"

#: in/chapter03-03.html:47
msgctxt "in/chapter03-03.html:47"
msgid "</BLOCKQUOTE>"
msgstr ""

#: in/chapter03-03.html:50
msgid ""
"<P>The <CODE>SETQ</CODE> form can actually take any even number of \n"
"arguments, which should be alternating symbols and values:</P>"
msgstr ""
"<P>\n"
"Форма <CODE>SETQ</CODE> фактически может принимать любое четное \n"
"число аргументов, которые должны быть чередующимся символами и значениями:\n"
"</P>"

#: in/chapter03-03.html:52
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(setq month \"June\" day 8 year 1954)<br><IMG SRC=\"gifs/right-arrow.gif\" "
"ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> 1954<br><br><IMG SRC=\"gifs/circle-dot.gif\" "
"ALT=\"?\" ALIGN=\"BOTTOM\"> month<br><IMG SRC=\"gifs/right-arrow.gif\" ALT="
"\"-&gt;\" ALIGN=\"BOTTOM\"> \"June\"<br><br><IMG SRC=\"gifs/circle-dot.gif\" "
"ALT=\"?\" ALIGN=\"BOTTOM\"> day<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-"
"&gt;|\" ALIGN=\"BOTTOM\"> 8<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?"
"\" ALIGN=\"BOTTOM\"> year<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" "
"ALIGN=\"BOTTOM\"> 1954</PRE>"
msgstr ""

#: in/chapter03-03.html:55
msgid ""
"<P><CODE>SETQ</CODE> performs the assignments from left to right, and \n"
"returns the rightmost value.</P>"
msgstr ""
"<P>\n"
"<CODE>SETQ</CODE> выполняет присваивания слева направо и возвращает \n"
"самое правое значение.\n"
"</P>"

#: in/chapter03-03.html:57
msgid "<h3>LET</h3> "
msgstr ""

#: in/chapter03-03.html:61
msgid ""
"<P>The <CODE>LET</CODE> form looks a little more complicated than what "
"we've \n"
"seen so far.  The <CODE>LET</CODE> form uses nested lists, but because it's "
"a \n"
"special form, only certain elements get evaluated.</P>"
msgstr ""
"<P>\n"
"Форма <CODE>LET</CODE> выглядит немного сложнее, чем те, которые мы видели \n"
"до сих пор. Форма <CODE>LET</CODE> использует вложенные списки, но "
"поскольку \n"
"это специальная форма, вычисляются только определенные элементы.\n"
"</P>"

#: in/chapter03-03.html:63
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(let ((a 3)<br>        (b 4)<br>        (c 5))<br>    (* (+ a b) c))<br><IMG "
"SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> 35<br><br><IMG "
"SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> a<br><IMG SRC=\"gifs/"
"right-arrow-bar.gif\" ALT=\"-&gt;|\" ALIGN=\"BOTTOM\"> Error: Unbound "
"variable<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"b<br><IMG SRC=\"gifs/right-arrow-bar.gif\" ALT=\"-&gt;|\" ALIGN=\"BOTTOM\"> "
"Error: Unbound variable<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" "
"ALIGN=\"BOTTOM\"> c<br><IMG SRC=\"gifs/right-arrow-bar.gif\" ALT=\"-&gt;|\" "
"ALIGN=\"BOTTOM\"> Error: Unbound variable</PRE>"
msgstr ""

#: in/chapter03-03.html:70
msgid ""
"<P>The above <CODE>LET</CODE> form defines values for the symbols \n"
"<CODE>A</CODE>, <CODE>B</CODE>, and <CODE>C</CODE>, then uses these as \n"
"variables in an arithmetic calculation.  The calculation's result is also \n"
"the result of the <CODE>LET</CODE> form.  Note that none of the variables \n"
"defined in the <CODE>LET</CODE> have a value after Lisp has finished \n"
"evaluating the form.</P>"
msgstr ""
"<P>\n"
"Приведенная выше форма <CODE>LET</CODE> определяет значения для символов \n"
"<CODE>A</CODE>, <CODE>B</CODE> и <CODE>C</CODE>, а затем использует их \n"
"в качестве переменных в арифметическом вычислении. Результат вычисления \n"
"также является и результатом формы <CODE>LET</CODE>. Обратите внимание, \n"
"что ни одна из переменных, определенных в <CODE>LET</CODE>, не имеет \n"
"значения после того, как Lisp закончил вычисление формы.\n"
"</P>"

#: in/chapter03-03.html:72
msgid "<P>In general, <CODE>LET</CODE> looks like this:</P>"
msgstr ""
"<P>\n"
"В общем, <CODE>LET</CODE> выглядит так:\n"
"</P>"

#: in/chapter03-03.html:74
msgid "<PRE WIDTH=80>(let (<VAR>bindings</VAR>) <VAR>forms</VAR>)</PRE>"
msgstr ""

#: in/chapter03-03.html:80
msgid ""
"<P>where <VAR>bindings</VAR> is any number of two-element lists -- each \n"
"list containing a symbol and a value -- and <VAR>forms</VAR> is any number \n"
"of Lisp forms.  The forms are evaluated, in order, using the values \n"
"established by the bindings.  <CODE>LET</CODE> returns the value(s) \n"
"returned by the last form.</P>"
msgstr ""
"<P>\n"
"где <VAR>bindings</VAR>-это любое количество двухэлементных списков , \n"
"каждый из которых содержит символ и значение , а <VAR>forms</VAR> - \n"
"любое количество форм Lisp. Формы вычисляются по порядку, используя \n"
"значения, установленные привязками. <CODE>LET</CODE> возвращает \n"
"значение(я), возвращенное последней формой.\n"
"</P>"

#: in/chapter03-03.html:83
msgid ""
"<P>Indentation doesn't affect the operation of <CODE>LET</CODE>, but proper\n"
"indentation does improve readability.  Consider these equivalent forms:</P>"
msgstr ""
"<P>\n"
"Отступ не влияет на работу <CODE>LET</CODE>, но правильные отступы улучшает "
"читабельность. Рассмотрим эти эквивалентные формы:\n"
"</P>"

#: in/chapter03-03.html:91
msgid ""
"<PRE WIDTH=80>(let ((p 52.8)\n"
"      (q 35.9)\n"
"      (r (f 12.07)))\n"
"  (g 18.3)\n"
"  (f p) \n"
"  (f q) \n"
"  (g r t))"
msgstr ""

#: in/chapter03-03.html:93
msgid ""
"(let ((p 52.8) (q 35.9) (r (f 12.07))) (g 18.3) (f p) (f q) (g r t))</PRE>"
msgstr ""

#: in/chapter03-03.html:98
msgid ""
"<P>In the first case, indentation makes clear which are the bindings and \n"
"which are the forms.  Even if the reader doesn't know about the different \n"
"roles played by the two parts of the <CODE>LET</CODE> form, the \n"
"indentation suggests a difference.</P>"
msgstr ""
"<P>\n"
"В первом случае отступ делает ясным, какие из элементов являются "
"привязками, \n"
"а какие-формами. Даже если читатель не знает о различных ролях, которые "
"играют \n"
"две части формы <CODE>LET</CODE>, отступ предполагает разницу.\n"
"</P>"

#: in/chapter03-03.html:103
msgid ""
"<P>In the second case, you'll have to count parentheses to know where the \n"
"bindings end and the forms begin.  Even worse, the absence of indentation \n"
"destroys visual cues about the different roles played by the two parts of \n"
"the <CODE>LET</CODE> form.</P>"
msgstr ""
"<P>\n"
"Во втором случае вам придется считать скобки, чтобы узнать, \n"
"где заканчиваются привязки и начинаются формы. Еще хуже то, \n"
"что отсутствие отступа разрушает визуальные подсказки о \n"
"различных ролях, которые играют две части формы <CODE>LET</CODE>.\n"
"</P>"

#: in/chapter03-03.html:107
msgid ""
"<P>If you define a variable using <CODE>SETQ</CODE> and then name the same \n"
"variable in a <CODE>LET</CODE> form, the value defined by <CODE>LET</CODE> \n"
"supersedes the other value during evaluation of the <CODE>LET</CODE>:</P>"
msgstr ""
"<P>\n"
"Если вы определяете переменную с помощью <CODE>SETQ</CODE>, а затем \n"
"используете ту же переменную в форме <CODE>LET</CODE>, то значение, \n"
"определенное <CODE>LET</CODE>, заменяет(затеняет) другое значение во время \n"
"вычисления <CODE>LET</CODE>:\n"
"</P>"

#: in/chapter03-03.html:109
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(setq a 89)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM"
"\"> 89<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"a<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"89<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (let "
"((a 3))<br>    (+ a 2))<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" "
"ALIGN=\"BOTTOM\"> 5<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN="
"\"BOTTOM\"> a<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> 89</PRE>"
msgstr ""

#: in/chapter03-03.html:112
msgid ""
"<P>Unlike <CODE>SETQ</CODE>, which assigns values in left-to-right order, \n"
"<CODE>LET</CODE> binds variables all at the same time:</P>"
msgstr ""
"<P>\n"
"В отличие от <CODE>SETQ</CODE>, который присваивает значения в порядке \n"
"слева направо, <CODE>LET</CODE> связывает переменные все одновременно:\n"
"</P>"

#: in/chapter03-03.html:114
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(setq w 77)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM"
"\"> 77<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(let ((w 8)<br>        (x w))<br>    (+ w x))<br><IMG SRC=\"gifs/right-arrow."
"gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> 85</PRE>"
msgstr ""

#: in/chapter03-03.html:118
msgid ""
"<P><CODE>LET</CODE> bound <CODE>W</CODE> to <CODE>8</CODE> and <CODE>X</"
"CODE> \n"
"to <CODE>W</CODE>.  Because these bindings happened at the same time, \n"
"<CODE>W</CODE> still had its value of <CODE>77</CODE>.</P>"
msgstr ""
"<P><CODE>LET</CODE> привязывает <CODE>W</CODE> к <CODE>8</CODE> и <CODE>X</"
"CODE> \n"
"к <CODE>W</CODE>. Поскольку эти привязки происходили одновременно, <CODE>W</"
"CODE> \n"
"все еще имел свое первоначальное значение <CODE>77</CODE>.</P>"

#: in/chapter03-03.html:122
msgid ""
"<BLOCKQUOTE>\n"
"Lisp has a variation of <CODE>LET</CODE>, called <CODE>LET*</CODE>, that "
"<EM>does</EM> perform \n"
"bindings in order:"
msgstr ""
"<BLOCKQUOTE>\n"
"Лисп имеет вариацию <CODE>LET</CODE>, называемую <CODE>LET*</CODE>, \n"
"которая выполняет привязки по порядку(последовательно):"

#: in/chapter03-03.html:124
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(setq u 37)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM"
"\"> 37<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(let* ((v 4)<br>         (u v))<br>    (+ u v))<br><IMG SRC=\"gifs/right-"
"arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> 8</PRE>"
msgstr ""

#: in/chapter03-03.html:126
msgctxt "in/chapter03-03.html:126"
msgid "</BLOCKQUOTE>"
msgstr ""

#: in/chapter03-03.html:128
msgid "<h3>COND</h3> "
msgstr ""

#: in/chapter03-03.html:132
msgid ""
"<P>The <CODE>COND</CODE> macro lets you evaluate Lisp forms "
"conditionally.  \n"
"Like <CODE>LET</CODE>, <CODE>COND</CODE> uses parentheses to delimit \n"
"different parts of the form.  Consider these examples:</P>"
msgstr ""
"<P>\n"
"Макрос <CODE>COND</CODE> позволяет вычислять формы Lisp условно. \n"
"Как и <CODE>LET</CODE>, <CODE>COND</CODE> использует круглые скобки для \n"
"разграничения различных частей формы. Рассмотрим эти примеры:\n"
"</P>"

#: in/chapter03-03.html:134
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(let ((a 1)<br>        (b 2)<br>        (c 1)<br>        (d 1))<br>    (cond "
"((eql a b) 1)<br>          ((eql a c) \"First form\" 2)<br>          ((eql a "
"d) 3)))<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"2</PRE>"
msgstr ""

#: in/chapter03-03.html:141
msgid ""
"<P>In the above <CODE>COND</CODE> form we defined three clauses.  Each \n"
"clause is a list beginning with a test form and followed by as many body \n"
"forms as desired.  The body forms are simply code that you want to execute \n"
"if the test succeeds.  The clauses are selected in order -- as soon as one \n"
"test succeeds, the corresponding body forms are evaluated and the value of \n"
"the last body form becomes the value of the <CODE>COND</CODE> form.</P>"
msgstr ""
"<P>\n"
"В приведенной выше форме <CODE>COND</CODE> мы определили три предложения. \n"
"Каждое предложение представляет собой список, начинающийся с тестовой "
"формы \n"
"сопровождаемой таким количеством форм тела, сколько необходимо. Формы тела "
"- \n"
"это просто код, который вы хотите выполнить, если тест пройдет успешно. \n"
"Предложения выбираются по порядку - как только один тест проходит успешно, \n"
"соответствующие формы тела вычисляются и значение последней формы тела \n"
"становится значением формы <CODE>COND</CODE>.\n"
"</P>"

#: in/chapter03-03.html:147
msgid ""
"<BLOCKQUOTE>\n"
"<CODE>COND</CODE> is more general than the special form, <CODE>IF</CODE>, "
"which only \n"
"allows one test and one form each for the <VAR>then</VAR> and <VAR>else</"
"VAR> \n"
"parts.\n"
"</BLOCKQUOTE>"
msgstr ""
"<BLOCKQUOTE>\n"
"<CODE>COND</CODE> является более общей, чем специальная форма <CODE>IF</"
"CODE>, \n"
"которая допускает только один тест и по одной форме для частей  <VAR>then</"
"VAR> и \n"
"<VAR>else</VAR>.\n"
"</BLOCKQUOTE>"

#: in/chapter03-03.html:162
msgid ""
"<P>Let's look at what happened in the example.  <CODE>EQL</CODE> returns \n"
"<CODE>T</CODE> if its two arguments are identical, or the same number \n"
"(there's a subtle difference that we'll cover in <A \n"
"HREF=\"chapter17.html\">Chapter 17</A>).  Only two of the three tests "
"executed.  \n"
"The first, <CODE>(EQL A B)</CODE>, returned NIL.  Therefore, the rest of \n"
"that clause (containing the number <CODE>1</CODE> as its only form) was \n"
"skipped.  The second clause tested <CODE>(EQL A C)</CODE>, which was "
"true.  \n"
"Because this test returned a non-<CODE>NIL</CODE> value, the remainder of \n"
"the clause (the two atomic forms, <CODE>\"First form\"</CODE> and \n"
"<CODE>2</CODE>) was evaluated, and the value of the last form was returned \n"
"as the value of the <CODE>COND</CODE>, which was then returned as the "
"value \n"
"of the enclosing <CODE>LET</CODE>.  The third clause was never tested, \n"
"since an earlier clause had already been chosen -- clauses are tested in \n"
"order.</P>"
msgstr ""
"<P>\n"
"Давайте посмотрим, что произошло в этом примере. <CODE>EQL</CODE> возвращает "
"T, \n"
"если два его аргумента идентичны или имеют одинаковое число \n"
"(есть тонкое различие, которое мы рассмотрим в <A HREF=\"chapter17.html"
"\">Главе 17</A>). Только два из трех тестов были выполнены. Первый, "
"<CODE>(EQL A B)</CODE>, вернул NIL.\n"
"Поэтому остальная часть этого предложения (содержащая число 1 как его "
"единственную форму) была пропущена. Вторая проверка <CODE>(EQL A C)</CODE>, "
"возвращает истину. \n"
"Поскольку этот тест возвращает не <CODE>NIL</CODE> значение, вычисляется \n"
"остальная часть  предложения  (две атомарные формы, <CODE>\"First form\"</"
"CODE> и \n"
"<CODE>2</CODE>), и значение последней формы было возвращено как значение \n"
"<CODE>COND</CODE>, которое затем было возвращено как значение заключающего \n"
"<CODE>LET</CODE>. \n"
"Третье предложение никогда не проверялось, так как более раннее предложение "
"уже было выбрано, а предложения проверяются по порядку.\n"
"</P>"

#: in/chapter03-03.html:168
msgid ""
"<P>Conventional use of <CODE>COND</CODE> uses <CODE>T</CODE> as the \n"
"test form in the final clause.  This guarantees that the body forms of the \n"
"final clause get evaluated if the tests fail in all of the other clauses.  \n"
"You can use the last clause to return a default value or perform some \n"
"appropriate operation.  Here's an example:</P>"
msgstr ""
"<P>\n"
"Обычное использование <CODE>COND</CODE> использует <CODE>T</CODE> в "
"качестве \n"
"тестовой формы в заключительном предложении. Это гарантирует, что формы "
"тела\n"
"заключительного предложения будут выполнены, если тесты не пройдут во всех \n"
"других предложениях. Вы можете использовать последнее предложение для \n"
"возврата значения по умолчанию или выполнения какой-либо соответствующей "
"операции. \n"
"Вот вам пример:\n"
"</P>"

#: in/chapter03-03.html:170
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(let ((a 32))<br>    (cond ((eql a 13) \"An unlucky number\")<br>          "
"((eql a 99) \"A lucky number\")<br>          (t \"Nothing special about this "
"number\")))<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM"
"\"> \"Nothing special about this number\"</PRE>"
msgstr ""

#: in/chapter03-03.html:172
msgid "<h3><A NAME=\"quote\">QUOTE</A></h3> "
msgstr ""

#: in/chapter03-03.html:176
msgid ""
"<P>Sometimes we'd like to suppress Lisp's normal evaluation rules.  One \n"
"such case is when we'd like a symbol to stand for itself, rather than its \n"
"value, when it appears as an argument of a function call:</P>"
msgstr ""
"<P>\n"
"Иногда мы хотели бы подавить нормальные правила вычисления Lisp. Один из \n"
"таких случаев - когда мы этого хотели бы, чтобы возвращался символ,\n"
"а не его значение, когда он появляется в качестве аргумента вызова функции:\n"
"</P>"

#: in/chapter03-03.html:178
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(setq a 97)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM"
"\"> 97<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"a<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"97<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (setq "
"b 23)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"23<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (setq "
"a b)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"23<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"a<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"23<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (setq "
"a (quote b))<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> B<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN="
"\"BOTTOM\"> a<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> B</PRE>"
msgstr ""

#: in/chapter03-03.html:182
msgid ""
"<P>The difference is that <CODE>B</CODE>'s <EM>value</EM> is used in \n"
"<CODE>(SETQ A B)</CODE>, whereas <CODE>B</CODE> <EM>stands for itself</EM> \n"
"in <CODE>(SETQ A (QUOTE B))</CODE>.</P>"
msgstr ""
"<P>\n"
"Разница заключается в том, что в <CODE>(SETQ A B)</CODE> используется \n"
"<EM>значение</EM> <CODE>B</CODE>, тогда как в <CODE>(SETQ A (QUOTE B))</"
"CODE>,\n"
"где <CODE>B</CODE> обозначает сам себя.\n"
"</P>"

#: in/chapter03-03.html:185
msgid ""
"<P>The <CODE>QUOTE</CODE> form is so commonly used that Lisp provides a \n"
"shorthand notation:</P>"
msgstr ""
"<P>\n"
"Форма <CODE>QUOTE</CODE> настолько часто используется, что Lisp \n"
"предоставляет сокращенную нотацию:\n"
"</P>"

#: in/chapter03-03.html:187
msgid ""
"<PRE WIDTH=80>(QUOTE <VAR>form</VAR>) <IMG SRC=\"gifs/equivalent.gif\" ALT="
"\"eqv\" ALIGN=\"BOTTOM\"> '<VAR>form</VAR></PRE>"
msgstr ""

#: in/chapter03-03.html:193
msgid ""
"<P>The <IMG SRC=\"gifs/equivalent.gif\" ALT=\"eqv\" ALIGN=\"BOTTOM\"> "
"symbol \n"
"means that the two Lisp forms are equivalent.  Lisp arranges the \n"
"equivalence of <CODE>'</CODE> and <CODE>QUOTE</CODE> through a reader \n"
"macro.  We'll take a brief look at how you can define your own reader \n"
"macros in <A HREF=\"chapter03-12.html\">Lesson 12</A>.</P>"
msgstr ""
"<P>\n"
"Символ <IMG SRC=\"gifs/equivalent.gif\" ALT=\"eqv\" ALIGN=\"BOTTOM\"> "
"означает, \n"
"что две формы Lisp эквивалентны. Lisp организует эквивалентность <CODE>'</"
"CODE>\n"
"и <CODE>QUOTE</CODE> через макрос чтения. Мы кратко рассмотрим, как вы \n"
"можете определить свои собственные макросы чтения в \n"
"<A HREF=\"chapter03-12.html\">Уроке 12</A>.</P>"

#: in/chapter03-03.html:207
msgid ""
"<hr>\n"
"<div align=\"center\">\n"
"<a href=\"contents.html\">Contents</a> | <a href=\"cover.html\">Cover</a> "
"<br> \n"
"<a href=\"chapter02.html\">Chapter 2</a> | <A HREF=\"chapter03.html"
"\">Chapter 3, Introduction</A> | <A HREF=\"chapter03-02.html\">Chapter 3, "
"Lesson 2</A> | Chapter 3, Lesson 3 | <A HREF=\"chapter03-04.html\">Chapter "
"3, Lesson 4</A> | <a href=\"chapter04.html\">Chapter 4</a>\n"
"</div>\n"
"<hr>\n"
"<address>\n"
"Copyright &copy; 1995-2001, David B. Lamkins<br>\n"
"All Rights Reserved Worldwide<br>\n"
"<br>\n"
"This book may not be reproduced without the written consent of its \n"
"author.  Online distribution is restricted to the author's site.\n"
"</address> \n"
"</body> </html> "
msgstr ""
