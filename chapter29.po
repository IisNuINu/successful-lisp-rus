#
# NuINu <don't@send.my>, 2020.
#
#. extracted from in/chapter29.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-19 13:51+0300\n"
"PO-Revision-Date: 2020-06-11 10:03+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in/chapter29.html:5
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html><head>\n"
"<title>Successful Lisp - Chapter 29</title>\n"
"</head> "
msgstr ""

#: in/chapter29.html:8
msgid ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Chapter 29 - I Thought it was Your Turn to Take Out the Garbage</h1> "
msgstr ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Глава 29 - Я думал, что теперь твоя очередь выносить\n"
"мусор</h1> "

#: in/chapter29.html:12
msgid ""
"<P>Chapter objective: Describe the benefits and costs of garbage "
"collection. \n"
"Show how to improve program performance by reducing the amount of garbage \n"
"it generates.</P>"
msgstr ""
"<P>\n"
"Цель главы: опишисать преимущества и затраты на сбор мусора. Показать, \n"
"как улучшить производительность программы, уменьшив количество мусора, \n"
"который она генерирует.\n"
"</P>"

#: in/chapter29.html:14
msgid "<h2>What is garbage?</h2>"
msgstr "<h2>Что такое мусор(garbage)?</h2>"

#: in/chapter29.html:17
msgid ""
"<p>In simplest terms, garbage is any storage that your program once\n"
"used, but uses no longer. Here's a simple example:"
msgstr ""
"<p>\n"
"Проще говоря, мусор - это любое хранилище, которое ваша программа когда-то \n"
"использовала, но больше не использует. Вот простой пример:"

#: in/chapter29.html:22
msgid ""
"<pre>\n"
"(let ((x (list 1 2 3 4 5)))\n"
"  (print x))\n"
"</pre> "
msgstr ""

#: in/chapter29.html:27
msgid ""
"<p>When you evaluate this form, the list <code>'(1 2 3 4 5 6)</code> is\n"
"first bound to <code>X</code> and then printed.  Once control leaves the\n"
"<code>LET</code> form, the list bound to <code>X</code> is no longer\n"
"accessible; its storage can be reclaimed by the garbage collector."
msgstr ""
"<p>\n"
"Когда вы вычисляете эту форму, список  <code>'(1 2 3 4 5 6)</code> сначала \n"
"привязывается к <code>X</code>, а затем печатается. Как только элемент "
"управления \n"
"покидает форму <code>LET</code>, список, привязанный к <code>X</code>, "
"больше не \n"
"доступен; его хранилище может быть восстановлено(возвращено для дальнейшего\n"
"использования) сборщиком мусора."

#: in/chapter29.html:38
msgid ""
"<blockquote> Actually, there's a minor complication that you should\n"
"know about. When you evaluate a form in the Lisp listener, the form\n"
"itself is assigned to the symbol <code>+</code>, and the value is\n"
"assigned to the symbol <code>*</code>. The previous form and value\n"
"are assigned to <code>++</code> and <code>**</code>, respectively,\n"
"and the form and value before that are assigned to <code>+++</code>\n"
"and <code>***</code>. Because these three pairs of variables give\n"
"you a way to access the forms and results, a form and its result\n"
"can't really become garbage until you've evaluated additional forms\n"
"to flush these six variables. "
msgstr ""
"<blockquote> \n"
"На самом деле, есть небольшое осложнение, о котором вы должны знать. \n"
"Когда вы вычисляете форму в прослушивателе Lisp, сама форма присваивается \n"
"символу <code>+</code>, а значение присваивается символу <code>*</code>. \n"
"Предыдущая форма и значение присваиваются соответственно <code>++</code> и \n"
"<code>**</code>, а форма и значение перед этим присваиваются <code>+++</"
"code>\n"
"и <code>***</code>. Поскольку эти три пары переменных дают вам возможность \n"
"получить доступ к формам и результатам, форма и ее результат не могут \n"
"действительно стать мусором, пока вы не вычислили дополнительные формы, \n"
"чтобы очистить эти шесть переменных."

#: in/chapter29.html:44
msgid ""
"<p>You won't normally have to worry about this unless you've done\n"
"something in the listener to exhaust all available memory in Lisp;\n"
"if you can evaluate a simple expression (like <code>T</code>) three\n"
"times, you'll release any storage held by <code>+</code>,\n"
"<code>*</code>, and friends.</blockquote> "
msgstr ""
"<p>\n"
"Обычно вам не придется беспокоиться об этом, если вы не сделали что-то \n"
"в прослушивателе, чтобы исчерпать всю доступную память в Lisp; если вы \n"
"можете вычислить простое выражение (например, <code>T</code>) три раза, \n"
"вы освободите любое хранилище, содержащееся в <code>+</code>,\n"
"<code>*</code> и их друзьях.\n"
"</blockquote> "

#: in/chapter29.html:46
msgid "<h2>Why is garbage collection important?</h2>"
msgstr "<h2>Почему сбор мусора так важен?</h2>"

#: in/chapter29.html:51
msgid ""
"<p>Lisp allocates storage as needed for your program's data. You don't\n"
"have direct control over how or when storage is allocated; the\n"
"compiler is free to do the best job it can to satisfy the meaning of\n"
"your program."
msgstr ""
"<p>\n"
"Lisp выделяет хранилище по мере необходимости для данных вашей программы. \n"
"У вас нет прямого контроля над тем, как и когда выделяется хранилище; \n"
"компилятор может сделать все возможное, чтобы удовлетворить размещение\n"
"значений вашей программы."

#: in/chapter29.html:58
msgid ""
"<p>Lisp does not provide a way for your program to explicitly\n"
"deallocate storage. This is an important feature, because you can\n"
"never write a program to mistakenly deallocate storage that is still\n"
"needed elsewhere in the program. This eliminates an entire class of\n"
"errors, sometimes referred to as \"dead pointer bugs\" in languages\n"
"that support explicit storage allocation and deallocation."
msgstr ""
"<p>\n"
"Lisp не предоставляет вашей программе возможности явного освобождения \n"
"хранилища. Это важная особенность, потому что вы никогда не сможете \n"
"написать программу, чтобы ошибочно освободить место хранения, которое \n"
"все еще необходимо в другом месте программы. Это устраняет целый класс \n"
"ошибок, иногда называемых \"ошибками убитого указателя(dead pointer)\" \n"
"в языках, которые поддерживают явное выделение и освобождение хранилища."

#: in/chapter29.html:66
msgid ""
"<p>On the other hand, your program may eventually run out of memory\n"
"if your program never deallocates storage. So a language (like Lisp)\n"
"that doesn't support explicit deallocation must still provide a\n"
"mechanism to automatically deallocate storage when the storage is no\n"
"longer needed. The garbage collector's job is to figure out which\n"
"storage can no longer be accessed by your program, and then recycle\n"
"those inaccessible storage blocks for later use."
msgstr ""
"<p>\n"
"С другой стороны, ваша программа может в конечном итоге исчерпать память, \n"
"если она никогда не освобождает место хранения. Таким образом, язык \n"
"(например, Lisp), который не поддерживает явное освобождение, по-прежнему \n"
"должен обеспечивать механизм автоматического освобождения хранилища, \n"
"когда оно больше не требуется. Задача сборщика мусора состоит в том, \n"
"чтобы выяснить, какое хранилище больше не может быть доступно вашей \n"
"программе, а затем переработать эти недоступные блоки хранения для \n"
"последующего использования."

#: in/chapter29.html:68
msgid "<h2>How does garbage collection work?</h2>"
msgstr "<h2>Как работает сборщик мусора?</h2>"

#: in/chapter29.html:75
msgid ""
"<p>Lisp compiles your program in such a way that all of its allocated\n"
"storage can be found by following pointers from a small number of known\n"
"<em>root</em> pointers. The compiler and runtime system arrange for your\n"
"program to retain type information at runtime; this is combined with \n"
"compile-time knowledge of storage layouts to encode knowledge of the\n"
"locations of pointers within data structures."
msgstr ""
"<p>\n"
"Lisp компилирует вашу программу таким образом, что все выделенные ей "
"хранилища\n"
"можно найти, следуя указателям из небольшого числа известных <em>корневых</"
"em>\n"
"указателей. Компилятор и система выполнения обеспечивают сохранение "
"информации \n"
"о типах в вашей программе во время выполнения; это сочетается со знанием "
"макетов \n"
"хранения во время компиляции для кодирования знаний о расположении "
"указателей \n"
"в структурах данных."

#: in/chapter29.html:83
msgid ""
"<p>The garbage collector follows every pointer in every reachable\n"
"data structure, starting with the root set. As it does so, it marks\n"
"the reachable data structures. Once every pointer has been followed,\n"
"and its referenced data structure marked, any block of memory that\n"
"is unmarked is unreachable by your program. The garbage collector\n"
"then reclaims these unmarked blocks for future use by the storage\n"
"allocator."
msgstr ""
"<p>\n"
"Сборщик мусора следует за каждым указателем в каждой доступной структуре "
"данных, \n"
"начиная с корневого набора. При этом он помечает доступные структуры "
"данных. \n"
"После того, как каждый указатель был прослежен и его ссылочная структура "
"данных \n"
"помечена, любой блок памяти, который не помечен, становится недоступным для "
"вашей\n"
"программы. Затем сборщик мусора восстанавливает эти немаркированные блоки "
"для \n"
"дальнейшего использования распределителем хранилища.\n"

#: in/chapter29.html:92
msgid ""
"<blockquote> The actual marking algorithm used by the garbage\n"
"collector must account for cycles in the reachable data structures,\n"
"and must perform in limited space and time; these details complicate\n"
"the implementation of a garbage collector. Also, most collectors\n"
"will relocate the marked data (and adjust references accordingly).\n"
"<a href=\"chapter33.html#jones96\">[Jones96]</a> provides an excellent\n"
"survey and analysis of various garbage collection techniques.\n"
"</blockquote> "
msgstr ""
"<blockquote> \n"
"Фактический алгоритм маркировки, используемый сборщиком мусора, \n"
"должен учитывать циклы в доступных структурах данных и должен выполняться \n"
"в ограниченном пространстве и времени; эти детали усложняют реализацию \n"
"сборщика мусора. Кроме того, большинство сборщиков перемещают помеченные \n"
"данные (и соответственно корректируют ссылки). [\n"
"<a href=\"chapter33.html#jones96\">[Jones96]</a> предоставляет "
"превосходный \n"
"обзор и анализ различных методов сбора мусора.\n"
"</blockquote> "

#: in/chapter29.html:94
msgid "<h2>What effect does garbage have on my program?</h2>"
msgstr "<h2>Какое влияние мусор оказывает на мою программу?</h2>"

#: in/chapter29.html:102
msgid ""
"<p>Garbage causes your program to run slower.  The more garbage\n"
"your program creates, the more time the garbage collector will need\n"
"to spend recycling the garbage.  Modern garbage collectors are very\n"
"efficient; it's unlikely that you'll see a noticeable pause in your\n"
"program's execution as the garbage collector runs.  However, the \n"
"cumulative effect of many small pauses will cause a detectable \n"
"degradation in overall performance."
msgstr ""
"<p>\n"
"Мусор заставляет вашу программу работать медленнее. Чем больше мусора \n"
"создает ваша программа, тем больше времени сборщику мусора нужно будет \n"
"потратить на переработку мусора. Современные сборщики мусора очень \n"
"эффективны; маловероятно, что вы заметите заметную паузу в выполнении \n"
"вашей программы по мере запуска сборщика мусора. Однако совокупный эффект \n"
"многих небольших пауз приведет к заметному ухудшению общей \n"
"производительности.\n"

#: in/chapter29.html:106
msgid ""
"<p>The good news is that garbage collection ensures that your\n"
"program will <em>never</em> suffer from memory leaks or dead\n"
"pointers. "
msgstr ""
"<p>\n"
"Хорошая новость заключается в том, что сбор мусора гарантирует, \n"
"что ваша программа никогда не будет страдать от утечек памяти \n"
"или мертвых указателей."

#: in/chapter29.html:114
msgid ""
"<p>Also, because many garbage collector implementations rearrange\n"
"storage as your program runs, heap fragmentation is minimized; thus,\n"
"a large Lisp program's performance will not degrade over time like a\n"
"C or C++ program that performs comparable storage allocation\n"
"(typically 25 to 50 percent degradation for a C or C++ program,\n"
"depending upon heap size, malloc/free implementation, and\n"
"allocation/deallocation patterns)."
msgstr ""
"<p>\n"
"Кроме того, поскольку многие реализации сборщика мусора перестраивают \n"
"хранилище по мере выполнения вашей программы, фрагментация кучи сводится \n"
"к минимуму; таким образом, производительность большой программы Lisp не \n"
"будет ухудшаться с течением времени, как у программы C или C++, которая \n"
"выполняет сопоставимое распределение хранилища (обычно от 25 до 50 "
"процентов \n"
"деградации для программы C или C++, в зависимости от размера кучи, "
"реализации \n"
"malloc/free и шаблонов распределения/освобождения)."

#: in/chapter29.html:121
msgid ""
"<blockquote> You should note that explicit storage allocation and\n"
"deallocation has overheads which are not strictly predictable. In\n"
"typical malloc and free implementations, block allocation involves a\n"
"search and deallocation involves extra work to coalesce free blocks;\n"
"both of these activities are of effectively indeterminate duration,\n"
"affected by the size and fragmentation of the heap. </blockquote> "
msgstr ""
"<blockquote> \n"
"Следует отметить, что явное распределение и освобождение хранилища имеет \n"
"накладные расходы, которые не являются строго предсказуемыми. В типичных \n"
"реализациях malloc и free выделение блоков включает поиск, а освобождение \n"
"включает дополнительную работу по объединению свободных блоков; обе эти \n"
"операции имеют фактически неопределенную продолжительность, зависящую от \n"
"размера и фрагментации кучи.\n"
"</blockquote> "

#: in/chapter29.html:123
msgid "<h2>How can I reduce garbage collection pauses in my program?</h2>"
msgstr "<h2>Как я могу уменьшить паузы сбора мусора в моей программе?</h2>"

#: in/chapter29.html:129
msgid ""
"<p>You can reduce garbage collection overhead by reducing garbage\n"
"generation. Use appropriate data structures; list manipulation is\n"
"the most common cause of garbage creation in poorly-written Lisp\n"
"programs. Pay attention to whether an operation returns a fresh copy\n"
"or a (possibly modified) existing copy of data."
msgstr ""
"<p>\n"
"Вы можете уменьшить накладные расходы на сборку мусора, уменьшив его \n"
"генерацию. Используйте соответствующие структуры данных; манипулирование \n"
"списками является наиболее распространенной причиной создания мусора \n"
"в плохо написанных программах Lisp. Обратите внимание на то, возвращает \n"
"ли операция свежую копию или (возможно, измененную) существующую \n"
"копию данных."

#: in/chapter29.html:132
msgid ""
"<p>If you have a profiler available in your Lisp system, use it to \n"
"find your program's hot spots for storage allocation."
msgstr ""
"<p>\n"
"Если у вас есть профилировщик, доступный в вашей системе Lisp, \n"
"используйте его, чтобы найти горячие точки вашей программы для \n"
"выделения хранилища."

#: in/chapter29.html:136
msgid ""
"<p>Use destructive operations carefully; they can reduce garbage\n"
"generation, but will cause subtle bugs if the destructively-modified\n"
"data is shared by another part of your program."
msgstr ""
"<p>\n"
"Используйте разрушающие операции осторожно; они могут уменьшить \n"
"образование мусора, но вызовут тонкие ошибки, если деструктивно \n"
"измененные данные будут совместно использоваться другой частью \n"
"вашей программы."

#: in/chapter29.html:149
msgid ""
"<hr>\n"
"<div align=\"center\">\n"
"<a href=\"contents.html\">Contents</a> | <a href=\"cover.html\">Cover</a> "
"<br> \n"
"<a href=\"chapter28.html\">Chapter 28</a> | Chapter 29 | <a href=\"chapter30."
"html\">Chapter 30</a> \n"
"</div>\n"
"<hr>\n"
"<address>\n"
"Copyright &copy; 1995-2001, David B. Lamkins<br>\n"
"All Rights Reserved Worldwide<br>\n"
"<br>\n"
"This book may not be reproduced without the written consent of its author.  "
"Online distribution is restricted to the author's site.\n"
"</address> \n"
"</body> </html> "
msgstr ""
