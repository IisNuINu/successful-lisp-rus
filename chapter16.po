#
# NuINu <don't@send.my>, 2020.
#
#. extracted from in/chapter16.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-19 13:50+0300\n"
"PO-Revision-Date: 2020-06-12 19:56+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in/chapter16.html:5
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html><head>\n"
"<title>Successful Lisp - Chapter 16</title>\n"
"</head> "
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html><head>\n"
"<META http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n"
"<title>Successful Lisp - Chapter 16</title>\n"
"</head> "

#: in/chapter16.html:8
msgid ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Chapter 16 - How to Find Your Way Around, Part 2</h1> "
msgstr ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Глава 16 - Как найти обходной путь, часть 2</h1> "

#: in/chapter16.html:14
msgid ""
"<P>It's once again time to take a break and learn about some more of\n"
"the tools you can use to grok <a href=\"#footnote1\">[1]</a> the inner\n"
"workings of Lisp and your programs. In this chapter, we'll learn\n"
"what the Lisp compiler does to your code, and how to watch what your\n"
"code does as it runs."
msgstr ""
"<P>\n"
"Пришло время сделать перерыв и узнать о некоторых других инструментах, \n"
"которые вы можете использовать, чтобы изучить <a href=\"#footnote1\">[1]</"
"a>\n"
"внутреннюю работу Lisp и ваших программ. В этой главе мы узнаем, что \n"
"компилятор Lisp делает с вашим кодом, и как посмотреть, что ваш код \n"
"делает во время работы."

#: in/chapter16.html:16
msgid ""
"<h2>DISASSEMBLE: I always wondered what they put inside those things...</h2>"
msgstr ""
"<h2>DISASSEMBLE: Мне всегда было интересно, что они кладут в эти вещи...</h2>"

#: in/chapter16.html:25
msgid ""
"<p>If you understand a little about compilers and assembly language\n"
"-- or if you're just interminably curious -- you can find out\n"
"exactly <em>how</em> the Lisp compiler translates your Lisp code.\n"
"<code>DISASSEMBLE</code> takes a function name or object and lists\n"
"the assembly-language instructions that would have been emitted by\n"
"the Lisp compiler if it actually emitted assembly-language code --\n"
"most compilers directly generate machine instructions without\n"
"invoking an assembler."
msgstr ""
"<p>\n"
"Если вы немного разбираетесь в компиляторах и языке ассемблера - \n"
"или если вам просто бесконечно любопытно , - вы можете точно узнать, \n"
"<em>как</em> компилятор Lisp преобразует ваш код Lisp. <code>DISASSEMBLE</"
"code>\n"
"принимает имя функции или объекта и выдает список инструкций на языке "
"ассемблера, \n"
"которые были бы выданы компилятором Lisp, если бы он действительно выдал код "
"на \n"
"языке ассемблера - большинство компиляторов непосредственно генерируют "
"машинные \n"
"инструкции без вызова ассемблера."

#: in/chapter16.html:31
msgid ""
"<p>The output of <code>DISASSEMBLE</code> is dependent both upon the\n"
"instruction set architecture of the machine you're using to run Lisp\n"
"and upon the Lisp implementation itself.  Here's an example of using\n"
"<code>DISASSEMBLE</code> on a very simple function; this was done\n"
"using Macintosh Common Lisp on a PowerPC processor."
msgstr ""
"<p>\n"
"Результат <code>DISASSEMBLE</code> зависит как от архитектуры набора \n"
"инструкций машины, которую вы используете для запуска Lisp, так и \n"
"от самой реализации Lisp. Вот пример использования дизассемблирования \n"
"на очень простой функции; это было сделано с помощью Macintosh Common Lisp \n"
"на процессоре PowerPC."

#: in/chapter16.html:48
msgid ""
"<pre>\n"
"? (defun add1 (n) (1+ n))\n"
"ADD1\n"
"? (disassemble 'add1)\n"
"  (TWNEI NARGS 4)\n"
"  (MFLR LOC-PC)\n"
"  (BLA .SPSAVECONTEXTVSP)\n"
"  (VPUSH ARG_Z)\n"
"  (LWZ NARGS 331 RNIL)\n"
"  (TWGTI NARGS 0)\n"
"  (LI ARG_Y '1)\n"
"  (LWZ ARG_Z 0 VSP)\n"
"  (BLA .SPRESTORECONTEXT)\n"
"  (MTLR LOC-PC)\n"
"  (BA .SPBUILTIN-PLUS)\n"
"</pre> "
msgstr ""

#: in/chapter16.html:59
msgid ""
"<p>The first thing you'll note about this listing is that it looks\n"
"\"Lisp-ish\" with the parentheses. The second thing you'll notice --\n"
"if you are familiar with the PowerPC instruction set -- is that \n"
"most of these forms are familiar; it's as if someone took part of a\n"
"real PowerPC assembly language program and bracketed each line of\n"
"text in parentheses.  You may also notice that there are no comments\n"
"in the assembly code, that there are some pseudo-instructions such\n"
"as <code>VPUSH</code>, and that this is not a complete program that\n"
"you could feed into an assembler (even after you stripped off the\n"
"parentheses). I'll explain all of these points."
msgstr ""
"<p>\n"
"Первое, что вы заметите в этом списке, - это то, что он выглядит \n"
"\"Lisp-повским\" с круглыми скобками. Вторая вещь, которую вы заметите - \n"
"если вы знакомы с набором инструкций PowerPC - это то, что большинство\n"
"этих форм знакомы; это как если бы кто-то взял часть реальной программы \n"
"языка ассемблера PowerPC и заключил каждую строку текста в скобки. \n"
"Вы также можете заметить, что в ассемблерном коде нет комментариев, \n"
"что есть некоторые псевдо-инструкции, такие как VPUSH, и что это \n"
"не полная программа, которую вы могли бы ввести в ассемблер (даже \n"
"после того, как вы сняли скобки). Я объясню вам все эти моменты."

#: in/chapter16.html:71
msgid ""
"<p>Many Lisp systems include an assembler that accepts statements\n"
"in the form generated by <code>DISASSEMBLE</code>. These statements\n"
"are often named LAP, for Lisp Assembly Program. With the proper \n"
"documentation, you can write LAP code and have it invoked by your\n"
"own functions. But you do need the vendor's documentation for this;\n"
"you can't just find the LAP assembler and feed it a list of LAP\n"
"instructions. You need to know how to use reserved registers, what\n"
"subroutines to call, what stack protocol to follow, and many other\n"
"low-level details. You also need to associate the code with a function\n"
"name so you can call it later; this is one of the pieces that is\n"
"missing from the output of <code>DISASSEMBLE</code>."
msgstr ""
"<p>\n"
"Многие системы Lisp включают ассемблер, который принимает операторы в "
"форме, \n"
"генерируемой <code>DISASSEMBLE</code>. Эти операторы часто называются LAP, \n"
"или Lisp Assembly Program. При наличии соответствующей документации вы "
"можете \n"
"написать код LAP и вызвать его своими собственными функциями. Но для этого "
"вам\n"
"действительно нужна документация поставщика; вы не можете просто найти "
"ассемблер \n"
"LAP и передать ему список инструкций LAP. Вы должны знать, как использовать\n"
"зарезервированные регистры, какие подпрограммы вызывать, какому протоколу "
"стека \n"
"следовать и многие другие низкоуровневые детали. Вам также нужно связать код "
"с \n"
"именем функции, чтобы вы могли вызвать его позже; это одна из частей, "
"которая \n"
"отсутствует в выходных данных <code>DISASSEMBLE</code>."

#: in/chapter16.html:81
msgid ""
"<p>Some Lisp systems provide additional information (beyond raw\n"
"assembler instructions) in their <code>DISASSEMBLE</code> output. In\n"
"the code above, you'll see that certain reserved registers or memory\n"
"locations are identified by a distinguishing name, such as\n"
"<code>NARGS</code>, <code>LOC-PC</code>, <code>ARG_Y</code>,\n"
"<code>ARG_Z</code>, <code>VSP</code> and <code>RNIL</code>. Sometimes\n"
"certain instructions (or even short instruction sequences) will be\n"
"given a mnemonic name that reflects their use by the Lisp compiler;\n"
"<code>VPUSH</code> is one such mnemonic used by this Lisp system."
msgstr ""
"<p>\n"
"Некоторые системы Lisp предоставляют дополнительную информацию \n"
"(помимо необработанных инструкций ассемблера) в  выходных \n"
"данных <code>DISASSEMBLE</code>. В приведенном выше коде вы увидите, \n"
"что некоторые зарезервированные регистры или места памяти идентифицируются \n"
"с помощью отличительного имени, такого как <code>NARGS</code>, <code>LOC-PC</"
"code>,\n"
"<code>ARG_Y</code>, <code>ARG_Z</code>, <code>VSP</code> и <code>RNIL</"
"code>.\n"
"Иногда некоторым инструкциям (или даже коротким последовательностям "
"команд) \n"
"присваивается мнемоническое имя, которое отражает их использование \n"
"компилятором Lisp; <code>VPUSH</code>-это одна из таких мнемоник, \n"
"используемых этой системой Lisp."

#: in/chapter16.html:87
msgid ""
"<p>Some Lisp systems are better than others at including explanatory\n"
"comments with the disassembled code. Systems that do include comments\n"
"typically synthesize comments to explain the code, or save information\n"
"that allows <code>DISASSEMBLE</code> to intersperse source program\n"
"fragments within the disassembly listing."
msgstr ""
"<p>\n"
"Некоторые Лисп-системы лучше других справляются с включением пояснительных \n"
"комментариев к дизассеблированному коду. Системы, включающие комментарии, \n"
"обычно синтезируют комментарии для объяснения кода или сохраняют \n"
"информацию, позволяющую <code>DISASSEMBLE</code> разнообразить\n"
"фрагментами исходных программ список дизассемблирования."

#: in/chapter16.html:98
msgid ""
"<p>One useful thing you can do with <code>DISASSEMBLE</code> is to\n"
"see whether <em>declarations</em> have any effect on your compiler.\n"
"Declarations are forms that provide <em>advice</em> to the compiler.\n"
"With the one exception of the <code>SPECIAL</code> declaration,\n"
"which alters the meaning of code that uses it (see <a\n"
"href=\"chapter08.html#special\">Chapter 8</a>) a compiler may or may\n"
"not use the information that you provide in a declaration. Your Lisp\n"
"vendor's documentation may provide some guidance as to the effect of\n"
"declarations, but the best (and most accurate) assessment is made by\n"
"reading the listing that <code>DISASSEMBLE</code> generates."
msgstr ""
"<p>\n"
"Одна полезная вещь, которую вы можете сделать с <code>DISASSEMBLE</code>, "
"- \n"
"это посмотреть, оказывают ли объявления какое-либо влияние на ваш "
"компилятор. \n"
"Объявления - это формы, которые предоставляют рекомендации компилятору. \n"
"За одним исключением объявления <code>SPECIAL</code>, которое изменяет \n"
"значение кода, использующего его (см. \n"
"<a href=\"chapter08.html#special\">Глава 8</a>), компилятор может "
"использовать или не\n"
"использовать информацию, которую вы предоставляете в объявлении. "
"Документация вашего\n"
"поставщика Lisp может содержать некоторые указания относительно влияния "
"деклараций, \n"
"но наилучшая (и наиболее точная) оценка производится путем чтения списка, \n"
"который генерирует <code>DISASSEMBLE</code>."

#: in/chapter16.html:109
msgid ""
"<p>The previous disassembly of <code>ADD1</code> shows that it calls\n"
"several subroutines: <code>.SPSAVECONTEXTVSP</code>,\n"
"<code>.SPRESTORECONTEXT</code>, and <code>.SPBUILTIN-PLUS</code>. If\n"
"that seems like an awful lot of work just to add one to a number,\n"
"consider that (1) the number can be of any type (including bignum,\n"
"which is an \"infinite\" precision integer type), (2) non-numeric\n"
"arguments are handled gracefully -- you'll get a break into the Lisp\n"
"debugger rather than a crash or a core dump, and (3) the function\n"
"probably makes an extra effort to make its presence known to the\n"
"Lisp debugger. "
msgstr ""
"<p>\n"
"Предыдущее дизассемблирование <code>ADD1</code> показывает, что он "
"вызывает \n"
"несколько подпрограмм: <code>.SPSAVECONTEXTVSP</code>,\n"
"<code>.SPRESTORECONTEXT</code>, и <code>.SPBUILTIN-PLUS</code>. Если вам "
"кажется, \n"
"что это ужасно много работы, чтобы просто добавить один к числу, подумайте, "
"что \n"
"(1) число может быть любого типа (включая bignum, который является "
"\"бесконечным\"\n"
"целочисленным типом точности), (2) нечисловые аргументы обрабатываются "
"изящно-\n"
"вы получите выход в отладчик Lisp, а не сбой или дамп ядра, и (3) функция, \n"
"вероятно, прилагает дополнительные усилия, чтобы сообщить о своем "
"присутствии \n"
"отладчику Lisp."

#: in/chapter16.html:116
msgid ""
"<p>So, what if we <em>want</em> to play fast and loose, assume that\n"
"<code>ADD1</code> will only be called for small integer arguments,\n"
"and stoically suffer the ungraceful consequences if we screw up and\n"
"pass the wrong type of data? We can add declarations to express our\n"
"intent, and then use <code>DISASSEMBLE</code> again to see whether\n"
"the compiler paid any attention to our wishes."
msgstr ""
"<p>\n"
"Итак, что же делать, если мы хотим играть быстро и свободно, предполагая, \n"
"что <code>ADD1</code>  будет вызываться только для небольших целочисленных \n"
"аргументов, и стоически страдать от неприятных последствий, если мы \n"
"облажаемся и передадим неправильный тип данных? Мы можем добавить "
"объявления, \n"
"чтобы выразить наше намерение, а затем снова использовать <code>DISASSEMBLE</"
"code>, \n"
"чтобы увидеть, обратил ли компилятор какое-либо внимание на наши пожелания."

#: in/chapter16.html:142
msgid ""
"<pre>\n"
"? (defun int-add1 (n)\n"
"    (declare (fixnum n)\n"
"             (optimize (speed 3) (safety 0) (debug 0)))\n"
"    (the fixnum (1+ n)))\n"
"INT-ADD1\n"
"? (disassemble 'int-add1)\n"
"  (MFLR LOC-PC)\n"
"  (STWU SP -16 SP)\n"
"  (STW FN 4 SP)\n"
"  (STW LOC-PC 8 SP)\n"
"  (STW VSP 12 SP)\n"
"  (MR FN TEMP2)\n"
"  (LWZ IMM0 -117 RNIL)\n"
"  (TWLLT SP IMM0)\n"
"  (VPUSH ARG_Z)\n"
"  (LWZ ARG_Z 0 VSP)\n"
"  (ADDI ARG_Z ARG_Z 4)\n"
"  (LWZ LOC-PC 8 SP)\n"
"  (MTLR LOC-PC)\n"
"  (LWZ VSP 12 SP)\n"
"  (LWZ FN 4 SP)\n"
"  (LA SP 16 SP)\n"
"  (BLR)\n"
"</pre> "
msgstr ""

#: in/chapter16.html:157
msgid ""
"<p>The <code>DECLARE</code> form in <code>INT-ADD1</code> includes\n"
"two kinds of advice. <code>(FIXNUM N)</code> declares that the\n"
"function parameter <code>N</code> is a small integer. (The range\n"
"depends upon your Lisp implementation, but you'll typically get\n"
"29-bit fixnums on a 32-bit processor; the remaining three bits are\n"
"often used by the Lisp system to encode type information.) The\n"
"<code>(OPTIMIZE ...</code> declaration is advice to the compiler\n"
"that you'd like it to emphasize certain properties of the compiled\n"
"code. Here, I've said that speed is of ultimate importance, and that\n"
"I could care less about runtime safety or debuggability. If the\n"
"compiler pays attention to all of this, I should get code that is\n"
"optimized for fixnums, runs fast, and falls over if I pass it\n"
"anything other than a fixnum or cause it to generate a result that\n"
"isn't a fixnum."
msgstr ""
"<p>\n"
"Форма <code>DECLARE</code> в <code>INT-ADD1</code> включает в себя два \n"
"вида советов. <code>(FIXNUM N)</code> объявляет, что параметр функции "
"<code>N</code>\n"
"является малым целым числом. (Диапазон зависит от вашей реализации Lisp, \n"
"но обычно вы получаете 29-битные fixnums на 32-битном процессоре; \n"
"оставшиеся три бита часто используются системой Lisp для кодирования "
"информации о типе.)\n"
"Объявление <code>(OPTIMIZE ...</code> - Это совет компилятору, что вы \n"
"хотите, чтобы он подчеркивал определенные свойства скомпилированного \n"
"кода. Здесь я сказал, что скорость имеет первостепенное значение, и \n"
"что я мог бы меньше заботиться о безопасности выполнения или отладке. \n"
"Если компилятор обращает внимание на все это, я должен получить код, \n"
"который оптимизирован для fixnum, работает быстро и падает, если я \n"
"передаю ему что-то другое, кроме fixnum, или заставляю его генерировать \n"
"результат, который не является fixnum."

#: in/chapter16.html:168
msgid ""
"<p>Looking at the generated code, it appears that the compiler\n"
"<em>has</em> paid attention to my declarations. The compiled code\n"
"for <code>INT-ADD1</code> is a bit longer than the code for\n"
"<code>ADD1</code>, but there are <em>no</em> subroutine calls. Every\n"
"instruction generated for <code>INT-ADD1</code> is a simple PowerPC\n"
"instruction (even the <code>VPUSH</code> instruction, which is just\n"
"an alias for a single PowerPC instruction). The addition is\n"
"performed by PowerPC instructions instead of a subroutine. In fact,\n"
"most of the code in <code>INT-ADD1</code> has to do with entering\n"
"and leaving the function."
msgstr ""
"<p>\n"
"Глядя на сгенерированный код, кажется, что компилятор обратил внимание \n"
"на мои объявления. Скомпилированный код для <code>INT-ADD1</code> немного \n"
"длиннее кода для <code>ADD1</code>, но в нем нет вызовов подпрограмм. \n"
"Каждая инструкция, генерируемая для <code>INT-ADD1</code>, является "
"простой \n"
"инструкцией PowerPC (даже инструкция <code>VPUSH</code>, которая является \n"
"просто псевдонимом для одной инструкции PowerPC). Сложение выполняется \n"
"инструкцией для PowerPC, а не подпрограммой. На самом деле, большая часть \n"
"кода в <code>INT-ADD1</code> имеет отношение к входу и выходу из функции.\n"

#: in/chapter16.html:172
msgid ""
"<p>By the way, <em>some</em> optimization setting is always in effect\n"
"if you don't use an <code>(OPTIMIZE ...</code> declaration. To find out\n"
"what are the global optimization settings, do this:"
msgstr ""
"<p>\n"
"Кстати, <em>некоторые</em> настройки оптимизации всегда действуют, если \n"
"вы не используете декларацию <code>(OPTIMIZE ...</code>. Чтобы узнать, \n"
"каковы параметры глобальной оптимизации, выполните следующие действия:"

#: in/chapter16.html:177
msgid ""
"<pre>\n"
"? (declaration-information 'optimize)\n"
"((SPEED 1) (SAFETY 1) (COMPILATION-SPEED 1) (SPACE 1) (DEBUG 1))\n"
"</pre> "
msgstr ""

#: in/chapter16.html:184
msgid ""
"<blockquote> <code>DECLARATION-INFORMATION</code> may not exist in a\n"
"pre-ANSI Common Lisp implementation, but there may be an alternative\n"
"way to access this information. Consult the vendor's documentation.\n"
"If that fails, see whether <code>APROPOS</code> (see <a\n"
"href=\"chapter10.html\">Chapter 10</a>) turns up anything that might\n"
"be useful. </blockquote> "
msgstr ""
"<blockquote> \n"
"<code>DECLARATION-INFORMATION</code> может не существовать в реализации \n"
"Pre-ANSI Common Lisp, но может существовать альтернативный способ доступа \n"
"к этой информации. Обратитесь к документации поставщика. Если это не\n"
"сработает, посмотрите, может ли <code>APROPOS</code> (см. \n"
"<a href=\"chapter10.html\">Главу 10</a>) найти что-нибудь полезное. \n"
"</blockquote> "

#: in/chapter16.html:186
msgid "<h2>BREAK and backtrace: How did I end up here?</h2>"
msgstr "<h2>BREAK и backtrace: как я попал сюда?</h2>"

#: in/chapter16.html:203
msgid ""
"<p>If you ever need to figure out <em>exactly</em> what's going on\n"
"at a particular point in your program, you can insert a\n"
"<code>BREAK</code> form at the point of interest; when your program\n"
"evaluates the <code>BREAK</code>, the Lisp system will immediately\n"
"stop your program (without losing any information), and transfer\n"
"control to the Lisp debugger. Once in the debugger, you can do\n"
"things like examine the call stack (sometimes named a backtrace,\n"
"since the stack frames are a trace of your program's current call\n"
"history, backward in time) and look at local variables at any level\n"
"in the stack. And, of course, you can execute any Lisp code that you\n"
"like. But wait, there's more! You can exit the debugger, and your\n"
"program will continue from where the <code>BREAK</code> interrupted\n"
"it. Or you can change the values of some variables before you\n"
"continue. If you want, you can provide a value to be returned by the\n"
"interrupted function. You can even redefine and restart functions\n"
"anywhere in the call stack."
msgstr ""
"<p>\n"
"Если вам когда-нибудь понадобится точно выяснить, что происходит в \n"
"определенной точке вашей программы, вы можете вставить форму <code>BREAK</"
"code>\n"
"в интересующую вас точку; когда ваша программа выполнит <code>BREAK</"
"code>, \n"
"система Lisp немедленно остановит вашу программу (без потери какой-либо "
"информации)\n"
"и передаст управление отладчику Lisp. Оказавшись в отладчике, вы можете "
"сделать \n"
"такие вещи, как изучить стек вызовов (иногда называемый backtrace, "
"поскольку \n"
"кадры стека являются трассировкой текущей истории вызовов вашей программы, "
"назад во\n"
"времени) и посмотреть на локальные переменные на любом уровне стека. И, "
"конечно же, \n"
"вы можете выполнить любой Лисп-код, который вам нравится. Но подождите, это "
"еще не \n"
"все! Вы можете выйти из отладчика, и ваша программа продолжит работу с того "
"места, \n"
"где ее прервал <code>BREAK</code>. Или вы можете изменить значения "
"некоторых \n"
"переменных, прежде чем продолжить. Если вы хотите, вы можете указать "
"значение, \n"
"которое будет возвращено прерванной функцией. Вы даже можете переопределить "
"и перезапустить функции в любом месте стека вызовов."

#: in/chapter16.html:209
msgid ""
"<p>The fact that <code>BREAK</code> is just a Lisp form has its\n"
"advantages. You can wrap it in a conditional expression of arbitrary\n"
"complexity, so that your program will trigger the break exactly when\n"
"it's needed; this is especially useful in debugging loops or recursive\n"
"functions."
msgstr ""
"<p>\n"
"Тот факт, что <code>BREAK</code>-это просто Lisp форма, имеет свои "
"преимущества. \n"
"Вы можете обернуть её в условное выражение произвольной сложности, чтобы "
"ваша \n"
"программа запускала <code>BREAK</code> именно тогда, когда это необходимо; "
"это \n"
"особенно полезно при отладке циклов или рекурсивных функций."

#: in/chapter16.html:220
msgid ""
"<p>If you have more than one <code>BREAK</code> statement in your\n"
"code, you may find it useful to identify the particular\n"
"<code>BREAK</code> that invokes the debugger. You can provide a\n"
"format control string and arguments that <code>BREAK</code> will use\n"
"to print a message upon entry to the debugger. The control string\n"
"and arguments are the same as you'd use for <code>FORMAT</code>.\n"
"(We've seen examples of <code>FORMAT</code> in Chapters <a\n"
"href=\"chapter04.html\">4</a>, <a href=\"chapter05.html\">5</a>, and <a\n"
"href=\"chapter06.html\">6</a>. <a href=\"chapter24.html\">Chapter 24</a>\n"
"give a a more complete treatment of <code>FORMAT</code>.)"
msgstr ""
"<p>\n"
"Если в коде имеется несколько операторов <code>BREAK</code>, то может \n"
"оказаться полезным определить конкретный <code>BREAK</code>, вызывающий "
"отладчик. \n"
"Вы можете указать формат управляющей строки и аргументы, которые BREAK "
"будет \n"
"использовать для печати сообщения при входе в отладчик. Управляющая строка "
"и \n"
"аргументы те же, что и для <code>FORMAT</code>. (Примеры <code>FORMAT</code> "
"мы \n"
"видели в главах <a href=\"chapter04.html\">4</a>, <a href=\"chapter05.html"
"\">5</a>,\n"
"и <a href=\"chapter06.html\">6</a>. В <a href=\"chapter24.html\">Главе 24</"
"a>\n"
" дается более полная трактовка <code>FORMAT</code>.)"

#: in/chapter16.html:226
msgid ""
"<blockquote>\n"
"The downside?  Most Lisp IDE's don't give you a point-and-click\n"
"interface to set <code>BREAK</code>s. (That <em>is</em> a downside,\n"
"right?)\n"
"</blockquote> "
msgstr ""
"<blockquote>\n"
"А обратная сторона? Большинство Лисп-IDE не дают вам интерфейс \"укажи и "
"кликни\"\n"
"для установки <code>BREAK</code>. (Это ведь обратная сторона, верно?)\n"
"</blockquote> "

#: in/chapter16.html:238
msgid ""
"<p>Lisp defines <code>BREAK</code>, the interface for your program\n"
"to gain entry into the debugger. Once there, the commands that\n"
"you'll use to navigate are <em>entirely</em>\n"
"implementation-specific. If you're lucky, you'll get a\n"
"window-and-menus interface to at least the most common actions. If,\n"
"instead of a GUI, the debugger presents you with just get a message\n"
"and a prompt, you may have to crack open the manual. But before you\n"
"get so desperate, try to get the debugger to print a help text or\n"
"menu: one of the commands <code>H</code>, <code>?</code>,\n"
"<code>:H</code>, or <code>:HELP</code> may work for your Lisp\n"
"system."
msgstr ""
"<p>\n"
"Lisp определяет <code>BREAK</code>, интерфейс для вашей программы, \n"
"чтобы получить доступ к отладчику. После этого команды, которые вы будете \n"
"использовать для навигации, полностью зависят от реализации. Если Вам "
"повезет, \n"
"вы получите интерфейс окна и меню, по крайней мере, для самых "
"распространенных \n"
"действий. Если вместо графического интерфейса отладчик предлагает вам "
"просто \n"
"сообщение и приглашение, вам, возможно, придется тщательно изучить \n"
"руководство. Но прежде чем вы впадете в такую крайность, попробуйте "
"заставить \n"
"отладчик напечатать текст справки или меню: одна из команд <code>H</code>, \n"
"<code>?</code>, <code>:H</code>, or <code>:HELP</code> может работать для \n"
"вашей системы Lisp."

#: in/chapter16.html:240
msgid ""
"<h2><a name=\"trace-and-step\">TRACE and STEP: I'm watching you!</a> </h2>"
msgstr ""
"<h2><a name=\"trace-and-step\">TRACE и STEP: Я слежу за тобой!</a> </h2>"

#: in/chapter16.html:246
msgid ""
"<p>When you need to know exactly <em>how</em> a function is working\n"
"at a particular point in your code, <code>BREAK</code> and the Lisp\n"
"debugger are indispensable tools. But they are labor intensive and\n"
"slow (at least relative to the program's normal execution) --\n"
"nothing happens except when you issue commands to the debugger. "
msgstr ""
"<p>\n"
"Когда вам нужно точно знать, как работает функция в определенной точке \n"
"вашего кода, <code>BREAK</code> и отладчик Lisp являются незаменимыми \n"
"инструментами. Но они трудоемки и медленны (по крайней мере, относительно \n"
"нормального выполнения программы) - ничего не происходит, кроме как при \n"
"выполнении команд отладчиком."

#: in/chapter16.html:254
msgid ""
"<p>Sometimes, it's enough to know that a particular function has\n"
"been called and returned a value. <code>TRACE</code> gives you this\n"
"ability.  You simply invoke trace with one or more function names,\n"
"and the Lisp environment arranges to print the name of the function\n"
"and its arguments upon entry, and the name of the function and its\n"
"values upon exit. All this happens without changing the source code\n"
"for the function."
msgstr ""
"<p>\n"
"Иногда достаточно знать, что определенная функция была вызвана \n"
"и вернула значение. <code>TRACE</code> дает вам эту способность. \n"
"Вы просто вызываете трассировку с одним или несколькими именами функций, \n"
"и среда Lisp организует печать имени функции и ее аргументов при входе, \n"
"а также имени функции и ее значений при выходе. Все это происходит без \n"
"изменения исходного кода функции."

#: in/chapter16.html:282
msgid ""
"<pre>\n"
"? (defun factorial (n)\n"
"    (if (plusp n)\n"
"      (* n (factorial (1- n)))\n"
"      1))\n"
"FACTORIAL\n"
"? (factorial 6)\n"
"720\n"
"? (trace factorial)\n"
"NIL\n"
"? (factorial 6)\n"
" Calling (FACTORIAL 6) \n"
"  Calling (FACTORIAL 5) \n"
"   Calling (FACTORIAL 4) \n"
"    Calling (FACTORIAL 3) \n"
"     Calling (FACTORIAL 2) \n"
"      Calling (FACTORIAL 1) \n"
"       Calling (FACTORIAL 0) \n"
"       FACTORIAL returned 1\n"
"      FACTORIAL returned 1\n"
"     FACTORIAL returned 2\n"
"    FACTORIAL returned 6\n"
"   FACTORIAL returned 24\n"
"  FACTORIAL returned 120\n"
" FACTORIAL returned 720\n"
"720\n"
"</pre> "
msgstr ""

#: in/chapter16.html:288
msgid ""
"<blockquote> Some Lisp systems may print only the first and last\n"
"lines of this trace, because of compiler optimizations. If you want\n"
"to see recursive calls, it may help to evaluate <code>(DECLAIM\n"
"(OPTIMIZE (DEBUG 3)))</code> before defining any functions to be\n"
"traced. </blockquote> "
msgstr ""
"<blockquote> \n"
"Некоторые системы Lisp могут печатать только первую и последнюю строки "
"этой \n"
"трассировки из-за оптимизации компилятора. Если вы хотите видеть "
"рекурсивные \n"
"вызовы, в этом может помочь выполнение \n"
"<code>(DECLAIM (OPTIMIZE (DEBUG 3)))</code> перед определением любых "
"отслеживаемых \n"
"функций.\n"
" </blockquote> "

#: in/chapter16.html:292
msgid ""
"<p>Notice how indentation is used to represent call stack depth.\n"
"This, and other details of the <code>TRACE</code> presentation, are\n"
"implementation dependent."
msgstr ""
"<p>\n"
"Обратите внимание, как отступы используется для представления глубины \n"
"стека вызовов. Это и другие детали представления <code>TRACE</code> \n"
"зависят от реализации.\n"

#: in/chapter16.html:297
msgid ""
"<p>When you no longer want to trace a function, evaluate\n"
"<code>UNTRACE</code>, passing the function name (or names).\n"
"<code>UNTRACE</code> without any arguments will stop tracing of all\n"
"currently traced functions."
msgstr ""
"<p>\n"
"Когда вы больше не хотите отслеживать функцию, вычислите <code>UNTRACE</"
"code>,\n"
"передавая имя функции (или имена). <code>UNTRACE</code> без каких-либо "
"аргументов \n"
"остановит трассировку всех текущих отслеживаемых функций."

#: in/chapter16.html:307
msgid ""
"<p>Sometimes, despite your best efforts, you're just not sure what\n"
"parts of a function are being executed. If you're this confused, and\n"
"you'd rather forge ahead than try to simplify the function, Lisp\n"
"gives you the <code>STEP</code> form. <code>STEP</code> takes a\n"
"complete Lisp form as an argument; it evaluates the form and returns\n"
"what the form returns. Along the way, though, it lets you see all of\n"
"the evaluations that happen -- step by step, as it were. Like\n"
"<code>BREAK</code>, <code>STEP</code> only has a standard program\n"
"interface; the user interface is implementation dependent."
msgstr ""
"<p>\n"
"Иногда, несмотря на все ваши усилия, вы просто не знаете, какие части \n"
"функции выполняются. Если вы настолько сбиты с толку и предпочитаете \n"
"идти вперед, а не пытаться упростить функцию, Lisp дает вам форму "
"<code>STEP</code>.\n"
"<code>STEP</code> принимает полную форму Lisp в качестве аргумента; \n"
"он вычисляет эту форму и возвращает то, что возвращает форма. Однако по "
"пути \n"
"он позволяет вам увидеть все вычисления, которые происходят - так сказать, \n"
"шаг за шагом. Как и <code>BREAK</code>, <code>STEP</code> имеет только "
"стандартный \n"
"программный интерфейс; пользовательский интерфейс зависит от реализации."

#: in/chapter16.html:315
msgid ""
"<blockquote> The quality of information available through\n"
"<code>STEP</code> varies widely among implementations. The most\n"
"common shortcoming is that you see some transformed version of the\n"
"program source, rather than the original source code. Generally,\n"
"you'll be able to spot enough clues (variable names, functions,\n"
"etc.) so that you can keep your bearings as you execute the stepped\n"
"code one form at a time. </blockquote> "
msgstr ""
"<blockquote> \n"
"Качество информации, доступной в рамках <code>STEP</code>, широко "
"варьируется \n"
"в зависимости от реализаций. Наиболее распространенным недостатком является "
"то, \n"
"что вы видите некоторую преобразованную версию исходного кода программы, а "
"не \n"
"исходный исходный код. Как правило, вы сможете обнаружить достаточное "
"количество \n"
"подсказок (имена переменных, функции и т. д.) так что вы можете держать свои "
"ориентиры \n"
"при выполнении пошагового кода по одной форме за раз.\n"
"</blockquote> "

#: in/chapter16.html:317
msgid "<hr>"
msgstr ""

#: in/chapter16.html:319
msgid "<p>Footnotes:"
msgstr ""

#: in/chapter16.html:328
msgid ""
"<p>[1] :grok: /grok/, var. /grohk/ /vt./  [from the novel\n"
"   \"Stranger in a Strange Land\", by Robert A. Heinlein, where it\n"
"   is a Martian word meaning literally `to drink' and metaphorically\n"
"   `to be one with'] The emphatic form is `grok in\n"
"   fullness'. 1. To understand, usually in a global sense.  Connotes\n"
"   intimate and exhaustive knowledge.  Contrast {zen}, which is\n"
"   similar supernal understanding experienced as a single brief flash.\n"
"   2. Used of programs, may connote merely sufficient understanding."
msgstr ""
"<p>[1] :grok: /grok/, var. /grohk/ /vt./  [из романа Роберта А. Хайнлайна \n"
"   \"Чужак в чужой стране\", где это марсианское слово буквально означает \n"
"   \"пить\" и метафорически \"быть единым с\"] эмфатическая форма - \n"
"   \"Грок во всей полноте\". \n"
"   1. Понимать, как правило, в глобальном смысле. Означает интимное и "
"исчерпывающее знание. \n"
"    Контраст {дзэн}, который подобен сверхъестественному пониманию, "
"переживаемому как одна \n"
"    короткая вспышка. \n"
"   2. Использование программ, может означать просто достаточное понимание."

#: in/chapter16.html:341
msgid ""
"<hr>\n"
"<div align=\"center\">\n"
"<a href=\"contents.html\">Contents</a> | <a href=\"cover.html\">Cover</a> "
"<br> \n"
"<a href=\"chapter15.html\">Chapter 15</a> | Chapter 16 | <a href=\"chapter17."
"html\">Chapter 17</a> \n"
"</div>\n"
"<hr>\n"
"<address>\n"
"Copyright &copy; 1995-2001, David B. Lamkins<br>\n"
"All Rights Reserved Worldwide<br>\n"
"<br>\n"
"This book may not be reproduced without the written consent of its author.  "
"Online distribution is restricted to the author's site.\n"
"</address> \n"
"</body> </html> "
msgstr ""
