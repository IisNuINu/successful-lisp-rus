#
# NuINu <don't@send.my>, 2020.
#
#. extracted from in/chapter06.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-19 13:50+0300\n"
"PO-Revision-Date: 2020-06-12 19:51+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in/chapter06.html:5
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html><head>\n"
"<title>Successful Lisp - Chapter 6</title>\n"
"</head> "
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html><head>\n"
"<META http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n"
"<title>Successful Lisp - Chapter 6</title>\n"
"</head> "

#: in/chapter06.html:8
msgid ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Chapter 6 - Deeper into Structures</h1> "
msgstr ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Глава 6 - Погружение в Структуры</h1> "

#: in/chapter06.html:12
msgid ""
"Structures were introduced in <a href=\"chapter03-10.html\">Chapter\n"
"3</a>. In this chapter, we'll look at the most useful optional\n"
"features of structures.<p>"
msgstr ""
"Структуры были представлены в <a href=\"chapter03-10.html\">Главе 3</a>. \n"
"В этой главе мы рассмотрим наиболее полезные дополнительные функции \n"
"структур.\n"
"<p>"

#: in/chapter06.html:14
msgid "<h2>Default values let you omit some initializers, sometimes</h2>"
msgstr ""
"<h2>Значения по умолчанию позволяют иногда опустить некоторые "
"инициализаторы</h2>"

#: in/chapter06.html:17
msgid ""
"Normally, if you create a new structure without specifying a value for\n"
"some slot, that slot will default to <code>NIL</code>.<p>"
msgstr ""
"Обычно, если вы создадите новую структуру без указания значения для "
"некоторого\n"
"слота, этот слот по умолчанию будет равен <code>NIL</code>.\n"
"<p>"

#: in/chapter06.html:21
msgid ""
"<pre>\n"
"? (defstruct foo-struct a b c)\n"
"FOO-STRUCT"
msgstr ""

#: in/chapter06.html:29
msgid ""
"? (let ((foo-1 (make-foo-struct :a 1 :b \"two\")))\n"
"    (print (foo-struct-b foo-1))\n"
"    (print (foo-struct-c foo-1))\n"
"    (values))\n"
"\"two\"\n"
"NIL\n"
"</pre> "
msgstr ""

#: in/chapter06.html:35
msgid ""
"<blockquote>\n"
"NOTE: We use the <code>(values)</code> form to suppress the return\n"
"value from the <code>LET</code> form.  Otherwise, we would have seen\n"
"one more <code>NIL</code> printed.\n"
"</blockquote> "
msgstr ""
"<blockquote>\n"
"Примечание: мы используем форму <code>(values)</code для подавления \n"
"возвращаемого значения из формы <code>LET</code>. Иначе мы увидели бы \n"
"еще один напечатанный REPL-ом <code>NIL</code>\n"
"</blockquote> "

#: in/chapter06.html:43
msgid ""
"In cases where <code>NIL</code> is a reasonable default value, this behavior "
"is\n"
"acceptable. But if the normal value of a slot is numeric, for example, "
"you'd\n"
"really like to start with a reasonable default value rather than having to\n"
"add a test in all of the code which uses a structure. The full form of a "
"slot\n"
"specification is a list of the slot name, its default value, and additional\n"
"options; specifying a bare name instead of the complete list is shorthand "
"for\n"
"\"default value of NIL, and no options.\"<p>"
msgstr ""
"В тех случаях, когда значение <code>NIL</code> является разумным значением \n"
"по умолчанию, такое поведение является приемлемым. Но если нормальное \n"
"значение слота числовое, например, вы действительно хотели бы начать с \n"
"разумного значения по умолчанию, а не добавлять всякие проверки в код, "
"который\n"
"использует структуру. Полная форма спецификации слота - это список имени "
"слота,\n"
"его значения по умолчанию и дополнительных опций; указание голого имени "
"вместо\n"
"полного списка является сокращением для \"значения по умолчанию NIL и "
"никаких\n"
"опций.\"\n"
"<p>"

#: in/chapter06.html:54
msgid ""
"<pre>\n"
"? (defstruct ship\n"
"    (name \"unnamed\")\n"
"    player\n"
"    (x-pos 0.0)\n"
"    (y-pos 0.0)\n"
"    (x-vel 0.0)\n"
"    (y-vel 0.0))\n"
"SHIP\n"
"</pre> "
msgstr ""

#: in/chapter06.html:58
msgid ""
"When we instantiate this structure using <code>(MAKE-SHIP)</code>, the "
"<code>NAME</code> \n"
"slot defaults to <code>\"unnamed\"</code>, the <code>PLAYER</code> slot "
"defaults to \n"
"<code>NIL</code>, and the position and velocity slots all default to "
"<code>0.0</code>.<p>"
msgstr ""
"Когда мы создаем эту структуру с помощью <code>(MAKE-SHIP)</code>, \n"
"слот <code>NAME</code> по умолчанию имеет значение <code>\"unnamed\"</"
"code>,\n"
"слот <code>PLAYER</code> по умолчанию равен <code>NIL</code>, а слоты "
"положения\n"
"(position) и скорости(velocity) по умолчанию равны <code>0.0</code>.\n"
"<p>"

#: in/chapter06.html:60
msgid ""
"Of course, we can still specify slot values to override the defaults:<p>"
msgstr ""
"Конечно, мы все еще можем указать значения слотов, чтобы переопределить \n"
"значения по умолчанию:\n"
"<p>"

#: in/chapter06.html:65
msgid ""
"<pre>\n"
"? (make-ship :name \"Excalibur\" :player \"Dave\" :x-pos 100.0 :y-pos "
"221.0)\n"
"#S(SHIP :NAME \"Excalibur\" :PLAYER \"Dave\" :X-POS 100.0 :Y-POS 221.0 :X-"
"VEL 0.0 :Y-VEL 0.0)\n"
"</pre> "
msgstr ""

#: in/chapter06.html:69
msgid ""
"Lisp's default printer for structures makes it easy to see the slots and "
"their values.\n"
"We've given explicit values to all of the slots except the two velocity "
"slots, which\n"
"have their default values.<p>"
msgstr ""
"Вывод Lisp по умолчанию для структур позволяет легко видеть слоты и их "
"значения.\n"
"Мы дали явные значения для всех слотов, кроме двух слотов скорости, которые "
"имеют\n"
"свои значения по умолчанию.\n"
"<p>"

#: in/chapter06.html:71
msgid "<h2>Change the way Lisp prints your structures</h2>"
msgstr "<h2>Изменение Лисп способа печати ваших структур</h2>"

#: in/chapter06.html:74
msgid ""
"To print a structure using other than the default printer, you may define a "
"new\n"
"print function as a structure option.<p>"
msgstr ""
"Чтобы напечатать структуру с помощью принтера(способа вывода объектов Лисп "
"в\n"
"стандартный вывод), отличного от принтера по умолчанию, можно определить "
"новую функцию печати как параметр структуры.<p>"

#: in/chapter06.html:94
msgid ""
"<pre>\n"
"? (defstruct (ship\n"
"              (:print-function\n"
"               (lambda (struct stream depth)\n"
"                 (declare (ignore depth))\n"
"                 (format stream \"[ship ~A of ~A at (~D, ~D) moving (~D, "
"~D)]\"\n"
"                         (ship-name struct)\n"
"                         (ship-player struct)\n"
"                         (ship-x-pos struct)\n"
"                         (ship-y-pos struct)\n"
"                         (ship-x-vel struct)\n"
"                         (ship-y-vel struct)))))\n"
"    (name \"unnamed\")\n"
"    player\n"
"    (x-pos 0.0)\n"
"    (y-pos 0.0)\n"
"    (x-vel 0.0)\n"
"    (y-vel 0.0))\n"
"SHIP"
msgstr ""

#: in/chapter06.html:98
msgid ""
"? (make-ship :name \"Proud Mary\" :player 'CCR)\n"
"[ship Proud Mary of CCR at (0.0, 0.0) moving (0.0, 0.0)]\n"
"</pre> "
msgstr ""

#: in/chapter06.html:104
msgid ""
"Actually, it's considered bad practice to print something the reader can't\n"
"interpret. Our use of the brackets around the printed ship description is\n"
"not necessarily good or bad, it depends upon how the current read table is\n"
"specified (we first saw reader macros in <a href=\"chapter03-12.html"
"\">Chapter 3,\n"
"Lesson 12</a>.<p>"
msgstr ""
"Вообще-то считается плохой практикой печатать то, что читатель(READER) не "
"может\n"
"интерпретировать. Наше использование скобок вокруг печатного описания \n"
"структуры Ship(корабля) не обязательно хорошо или плохо, это зависит \n"
"от того, как задана текущая таблица чтения (мы впервые увидели макросы "
"чтения\n"
"в <a href=\"chapter03-12.html\">Главе 3, Урок 12</a>).\n"
"<p>"

#: in/chapter06.html:114
msgid ""
"One way to ensure that the reader doesn't get confused is to deliberately "
"print\n"
"something so as to be unreadable. By convention, Lisp prints such objects\n"
"beginning with <code>#&lt;</code>. You could change your format string to "
"read\n"
"<code>\"#&lt;ship ~A of ~A at (~D, ~D) moving (~D, ~D)&gt;\"</code>, so the "
"prior\n"
"<code>MAKE-SHIP</code> example would print <code>#&lt;ship Proud Mary of CCR "
"at (0.0,\n"
"0.0) moving (0.0, 0.0)&gt;</code>. However, since 1990 Lisp systems have had "
"a\n"
"<code>PRINT-UNREADABLE-OBJECT</code> macro which should be used for this \n"
"purpose. If the printer control variable <code>*PRINT-READABLY*</code> is "
"true,\n"
"<code>PRINT-UNREADABLE-OBJECT</code> will signal an error.<p>"
msgstr ""
"Один из способов гарантировать, что читатель не запутается, - это намеренно\n"
"напечатать что-то, чтобы оно быть нечитаемым. По соглашению Lisp печатает \n"
"такие объекты, начиная с <code>#&lt;</code>. Вы можете изменить свой формат\n"
"строк,так чтобы они читались как: \n"
"<code>\"#&lt;ship ~A of ~A at (~D, ~D) moving (~D, ~D)&gt;\"</code>, поэтому "
"до\n"
"<code>MAKE-SHIP</code> пример печати \n"
"<code>#&lt;ship Proud Mary of CCR at (0.0, 0.0) moving (0.0, 0.0)&gt;</"
"code>\n"
"Однако с 1990 года в системах Lisp появился  макрос \n"
"<code>PRINT-UNREADABLE-OBJECT</code>, который должен использоваться для "
"этой\n"
"цели. Если переменная управления принтером <code>*PRINT-READABLY*</code> \n"
"имеет значение true, то  <code>PRINT-UNREADABLE-OBJECT</code> \n"
"будет сигнализировать об ошибке.\n"
"<p>"

#: in/chapter06.html:137
msgid ""
"<pre>\n"
"<i>;; Use PRINT-UNREADABLE-OBJECT macro -- changes in <b>boldface</b> </i> \n"
"? (defstruct (ship\n"
"              (:print-function\n"
"               (lambda (struct stream depth)\n"
"                 (declare (ignore depth))\n"
"                 <b>(print-unreadable-object (struct stream)</b> \n"
"                   (format stream \"ship ~A of ~A at (~D, ~D) moving (~D, "
"~D)\"\n"
"                           (ship-name struct)\n"
"                           (ship-player struct)\n"
"                           (ship-x-pos struct)\n"
"                           (ship-y-pos struct)\n"
"                           (ship-x-vel struct)\n"
"                           (ship-y-vel struct))<b>)</b>)))\n"
"    (name \"unnamed\")\n"
"    player\n"
"    (x-pos 0.0)\n"
"    (y-pos 0.0)\n"
"    (x-vel 0.0)\n"
"    (y-vel 0.0))\n"
"SHIP\n"
"</pre> "
msgstr ""

#: in/chapter06.html:139
msgid "<h2>Alter the way structures are stored in memory</h2>"
msgstr "<h2>Изменение способа хранения структур в памяти</h2>"

#: in/chapter06.html:145
msgid ""
"Lisp stores structures in an implementation-dependent manner unless you\n"
"specify otherwise using a structure option. You have two choices if you\n"
"decide to specify structure storage: store it as a vector (possibly with\n"
"a particular type for all of the elements) or as a list.  Here, we use\n"
"the untyped vector option -- the list option is similar:<p>"
msgstr ""
"Lisp хранит структуры в зависимости от реализации, если не указано иное \n"
"с помощью параметры структуры. У вас есть два варианта, если вы решите \n"
"указать хранилище структуры: хранить её(структуру) в виде вектора \n"
"(возможно, с определенным типом для всех элементов) или в виде списка. \n"
"Здесь мы используем опцию нетипизированного вектора - опция списка "
"аналогична:\n"
"<p>"

#: in/chapter06.html:151
msgid ""
"<pre>\n"
"? (defstruct (bar\n"
"              (:type vector))\n"
"    a b c)\n"
"BAR"
msgstr ""

#: in/chapter06.html:155
msgid ""
"? (make-bar)\n"
"#(NIL NIL NIL)\n"
"</pre> "
msgstr ""

#: in/chapter06.html:161
msgid ""
"Note that the slot names are not stored when you specify the storage type.\n"
"This is probably the biggest advantage for using this option -- it can save\n"
"storage in the amount of a machine word per slot per instance.  The "
"disadvantage\n"
"is that Lisp does not recognize such a structure as a distinct type, and "
"does\n"
"not create a <code>&lt;structure-name&gt;-P</code> predicate for you.<p>"
msgstr ""
"Обратите внимание, что имена слотов не сохраняются при указании типа "
"хранилища.\n"
"Это, вероятно, самое большое преимущество для использования этой опции - \n"
"она может сэкономить память в размере машинного слова на слот в каждом\n"
"экземпляре. Недостатком является то, что Lisp не распознает такую структуру\n"
"как отдельный тип и не создает для вас предикат \n"
"<code>&lt;structure-name&gt;-P</code>.\n"
"<p>"

#: in/chapter06.html:165
msgid ""
"If you are satisfied with being able to retrieve the name of the structure,\n"
"but still want the storage savings associated with specifying the "
"structure's\n"
"representation, you can do this:<p>"
msgstr ""
"Если вам достаточно возможности получить имя структуры, но все еще хотите\n"
"сэкономить на средствах хранения, связанных с определением представления "
"структуры, вы можете сделать это:<p>"

#: in/chapter06.html:172
msgid ""
"<pre>\n"
"? (defstruct (bar\n"
"              (:type vector)\n"
"              :named)\n"
"    a b c)\n"
"BAR"
msgstr ""

#: in/chapter06.html:176
msgid ""
"? (make-bar)\n"
"#(BAR NIL NIL NIL)\n"
"</pre> "
msgstr ""

#: in/chapter06.html:184
msgid ""
"Using the list representation option has the drawbacks noted above, but "
"none\n"
"of the advantages; the backbone of the list typically <em>adds</em> a "
"machine\n"
"word of storage per slot when compared to the default representation, which "
"is\n"
"usually a vector.  The only time it would make sense to explicitly specify "
"a\n"
"list representation is when the default structure representation is list-"
"based\n"
"or when the Lisp implementation imposes some artificial limit on the space\n"
"reserved for storage of vectors; neither case applies in modern "
"implementations.<p>"
msgstr ""
"Использование опции представления в виде списка имеет недостатки, "
"отмеченные\n"
"выше, но не имеет никаких преимуществ; костяк списка обычно добавляет "
"машинное\n"
"слово памяти на слот по сравнению с представлением по умолчанию, которое "
"обычно\n"
"является вектором. Единственный случай, когда имеет смысл явно указать\n"
"представление списка, - это когда представление структуры по умолчанию "
"основано\n"
"на списке или когда реализация Lisp накладывает некоторое искусственное\n"
"ограничение на пространство, зарезервированное для хранения векторов; \n"
"ни тот, ни другой случай не применим в современных реализациях.\n"
"<p>"

#: in/chapter06.html:186
msgid "<h2>Shorten slot accessor names</h2>"
msgstr "<h2>Сокращенные имена процедур доступа к слотам</h2>"

#: in/chapter06.html:192
msgid ""
"Slot accessor names are constructed from the name of the structure and the\n"
"slot.  If the structure and the slot both have lengthy names, the accessor\n"
"names can get unwieldy.  You can abbreviate names somewhat by using the \n"
"<code>:CONC-NAME</code> structure option to specify a name to use instead\n"
"of the structure name."
msgstr ""
"Имена средств доступа к слотам(accessor-ов) строятся из названия структуры\n"
"и слота. Если структура и слот имеют длинные имена, имена доступа могут "
"стать\n"
"громоздкими. Вы можете несколько сократить имена, используя параметр "
"структуры: \n"
"<code>:CONC-NAME</code>, чтобы указать имя, которое будет использоваться "
"вместо имени структуры.\n"

#: in/chapter06.html:198
msgid ""
"<pre>\n"
"? (defstruct (galaxy-class-cruiser-ship\n"
"              (:conc-name gcc-ship-)) <i>; name includes trailing hyphen!</"
"i> \n"
"    name player (x-pos 0.0) (y-pos 0.0) (x-vel 0.0) (y-vel 0.0))\n"
"GALAXY-CLASS-CRUISER-SHIP"
msgstr ""

#: in/chapter06.html:204
msgid ""
"? (let ((ship (make-galaxy-class-cruiser-ship)))\n"
"    (print (gcc-ship-x-pos ship)) <i>; note abbreviated accessor name</i> \n"
"    (values))\n"
"0.0\n"
"</pre> "
msgstr ""

#: in/chapter06.html:206
msgid "<h2>Allocate new structures without using keyword arguments</h2>"
msgstr ""
"<h2>Выделение новых структур без использования аргументов ключевых слов</h2>"

#: in/chapter06.html:211
msgid ""
"For certain structures, it may be more convenient to make a new instance\n"
"using just a list of arguments instead of keywords and arguments.  You can\n"
"redefine a structure constructor's argument list using the <code>:"
"CONSTRUCTOR</code> \n"
"option.<p>"
msgstr ""
"Для некоторых структур может оказаться более удобным создать новый "
"экземпляр,\n"
"используя только список аргументов вместо ключевых слов и аргументов. \n"
"Список аргументов конструктора структуры можно переопределить с помощью\n"
"параметра <code>:CONSTRUCTOR</code> .<p>"

#: in/chapter06.html:218
msgid ""
"<pre>\n"
"? (defstruct (3d-point\n"
"              (:constructor\n"
"               create-3d-point (x y z)))\n"
"    x y z)\n"
"3D-POINT"
msgstr ""

#: in/chapter06.html:222
msgid ""
"? (create-3d-point 1 -2 3)\n"
"#S(3D-POINT :X 1 :Y -2 :Z 3)\n"
"</pre> "
msgstr ""

#: in/chapter06.html:227
msgid ""
"<blockquote>\n"
"NOTE: The slot values do <em>not</em> default to <code>NIL</code> if you use "
"a\n"
"<code>:CONSTRUCTOR</code> option!\n"
"</blockquote> "
msgstr ""
"<blockquote>\n"
"Примечание: значения слотов по умолчанию <em>не</em> равны <code>NIL</"
"code>,\n"
" если вы используете опцию <code>:CONSTRUCTOR</code>!\n"
"</blockquote> "

#: in/chapter06.html:230
msgid ""
"Most lambda-list options are available to the constructor function -- "
"consult\n"
"a Lisp reference manual for details.<p>"
msgstr ""
"Большинство параметров лямбда-списка доступны для функции конструктора\n"
" - обратитесь к справочному руководству Lisp для получения подробной\n"
"информации.<p>"

#: in/chapter06.html:232
msgid "<h2>Define one structure as an extension of another</h2>"
msgstr "<h2>Определение одной структуры как расширение другой</h2>"

#: in/chapter06.html:235
msgid ""
"We use inheritance to define one object in terms of another. Structures "
"permit\n"
"a very simple form of inheritance using the <code>:INCLUDE</code> option.<p>"
msgstr ""
"Мы используем наследование для определения одного объекта в терминах "
"другого.\n"
"Структуры допускают очень простую форму наследования с использованием "
"опции:\n"
"<code>:INCLUDE</code>.<p>"

#: in/chapter06.html:240
msgid ""
"<pre>\n"
"? (defstruct employee\n"
"    name department salary social-security-number telephone)\n"
"EMPLOYEE"
msgstr ""

#: in/chapter06.html:243
msgid ""
"? (make-employee)\n"
"#S(EMPLOYEE :NAME NIL :DEPARTMENT NIL :SALARY NIL :SOCIAL-SECURITY-NUMBER "
"NIL :TELEPHONE NIL)"
msgstr ""

#: in/chapter06.html:248
msgid ""
"? (defstruct (manager\n"
"              (:include employee))\n"
"    bonus direct-reports)\n"
"MANAGER"
msgstr ""

#: in/chapter06.html:252
msgid ""
"? (make-manager)\n"
"#S(MANAGER :NAME NIL :DEPARTMENT NIL :SALARY NIL :SOCIAL-SECURITY-NUMBER "
"NIL :TELEPHONE NIL :BONUS NIL :DIRECT-REPORTS NIL)\n"
"</pre> "
msgstr ""

#: in/chapter06.html:258
msgid ""
"All accessors which apply to an <code>EMPLOYEE</code> also apply to a\n"
"<code>MANAGER</code>, and a <code>MANAGER</code> instance is also an\n"
"<code>EMPLOYEE</code> instance. Notice in the following example how the\n"
"<code>...-NAME</code> accessors for both <code>MANAGER</code> and\n"
"<code>EMPLOYEE</code> reference the same slot.<p>"
msgstr ""
"Все методы доступа, которые применяются к <code>EMPLOYEE</code>, также\n"
"применяются к <code>MANAGER</code>, и экземпляр <code>MANAGER</code> также\n"
"является экземпляром <code>EMPLOYEE</code>. Обратите внимание в следующем\n"
"примере, как методы доступа <code>...-NAME</code> как для \n"
"<code>MANAGER</code>(менеджера), так и для <code>EMPLOYEE</"
"code>(сотрудника),\n"
"ссылаются на один и тот же слот.<p>"

#: in/chapter06.html:262
msgid ""
"<pre>\n"
"? (setq mgr (make-manager))\n"
"#S(MANAGER :NAME NIL :DEPARTMENT NIL :SALARY NIL :SOCIAL-SECURITY-NUMBER "
"NIL :TELEPHONE NIL :BONUS NIL :DIRECT-REPORTS NIL)"
msgstr ""

#: in/chapter06.html:265
msgid ""
"? (setf (manager-name mgr) \"Buzz\")\n"
"\"Buzz\""
msgstr ""

#: in/chapter06.html:269
msgid ""
"? (employee-name mgr)\n"
"\"Buzz\"\n"
"</pre> "
msgstr ""

#: in/chapter06.html:274
msgid ""
"A structure may have one <code>:INCLUDE</code> option, at most.  This limits "
"the\n"
"ability of structures to model the real world by describing inheritance.  "
"CLOS\n"
"objects allow multiple inheritance, and have many other useful and "
"convenient features.\n"
"We will get our first look at CLOS in <a href=\"chapter07.html\">Chapter 7</"
"a>."
msgstr ""
"Структура может иметь самое большее, одну опцию <code>:INCLUDE</code>. \n"
"Это ограничивает способность структур моделировать реальный мир, \n"
"описывая наследование. Объекты CLOS допускают множественное наследование \n"
"и имеют множество других полезных и удобных функций. Мы впервые взглянем \n"
"на CLOS в <a href=\"chapter07.html\">Главе 7</a>."

#: in/chapter06.html:287
msgid ""
"<hr>\n"
"<div align=\"center\">\n"
"<a href=\"contents.html\">Contents</a> | <a href=\"cover.html\">Cover</a> "
"<br> \n"
"<a href=\"chapter05.html\">Chapter 5</a> | Chapter 6 | <a href=\"chapter07."
"html\">Chapter 7</a> \n"
"</div>\n"
"<hr>\n"
"<address>\n"
"Copyright &copy; 1995-2001, David B. Lamkins<br>\n"
"All Rights Reserved Worldwide<br>\n"
"<br>\n"
"This book may not be reproduced without the written consent of its author.  "
"Online distribution is restricted to the author's site.\n"
"</address> \n"
"</body> </html> "
msgstr ""
