#
# NuINu <don't@send.my>, 2020.
#
#. extracted from in/chapter05.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-19 13:50+0300\n"
"PO-Revision-Date: 2020-05-26 10:14+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in/chapter05.html:5
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html><head>\n"
"<title>Successful Lisp - Chapter 5</title>\n"
"</head> "
msgstr ""

#: in/chapter05.html:8
msgid ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Chapter 5 - Introducing Iteration</h1> "
msgstr ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Глава 5 - Введение в итерацию</h1> "

#: in/chapter05.html:13
msgid ""
"<p>Lisp has several ways to do iteration. In this section we'll look at\n"
"the most common looping constructs. Later, in <a href=\"chapter12.html"
"\">Chapter 12</a>, we'll look at mapping, then we'll take a brief look at "
"<i>series</i> in \n"
"<a href=\"chapter32.html\">Chapter 32</a>; both of these are closely related "
"to\n"
"iteration.<p>"
msgstr ""
"<p>\n"
"Лисп имеет несколько способов выполнить итерацию. В этом разделе мы \n"
"рассмотрим наиболее распространенные циклические конструкции. \n"
"Позже, в <a href=\"chapter12.html\">Главе 12</a>, мы рассмотрим отображение\n"
"(mapping), а затем кратко рассмотрим <i>series</i>(последовательности) в \n"
"<a href=\"chapter32.html\">Главе 32</a>; они оба тесно связаны с итерацией.\n"
"<p>"

#: in/chapter05.html:15
msgid "<h2>Simple LOOP loops forever...</h2>"
msgstr "<h2>Простой LOOP вечный цикл...</h2>"

#: in/chapter05.html:21
msgid ""
"<p>The simplest loop in Lisp is just a <code>LOOP</code> form\n"
"wrapped around whatever you want to repeat. Before you try this next\n"
"bit of code, know how to interrupt execution of your Lisp system;\n"
"normally this is Command-period on a Macintosh or Control-Break on a\n"
"PC."
msgstr ""
"<p>Самый простой цикл в Lisp-это просто форма <code>LOOP</code>, \n"
"обернутая вокруг всего, что вы хотите повторить. Прежде чем вы попробуете \n"
"этот следующий кусок кода, узнайте, как прервать выполнение вашей \n"
"системы Lisp; обычно это Command-period на Macintosh или Control-Break\n"
"на ПК."

#: in/chapter05.html:37
msgid ""
"<pre>\n"
"? (loop\n"
"    (print \"Look, I'm looping!\"))\n"
"\"Look, I'm looping!\" \n"
"\"Look, I'm looping!\" \n"
"\"Look, I'm looping!\" \n"
"\"Look, I'm looping!\" \n"
"\"Look, I'm looping!\" \n"
"\"Look, I'm looping!\" \n"
"\"Look, I'm looping!\" \n"
"\"Look, I'm looping!\" \n"
"<i>... and so on, until you interrupt execution...</i> \n"
"Aborted\n"
"? \n"
"</pre> "
msgstr ""

#: in/chapter05.html:41
msgid ""
"<p>This kind of endless loop has legitimate applications. You're already\n"
"familiar with one: <code>(LOOP (PRINT (EVAL (READ))))</code>, Lisp's\n"
"read-eval-print loop.<p>"
msgstr ""
"<p>TЭтот вид бесконечного цикла имеет законные применения.\n"
"Вы уже знакомы с одним из них: <code>(LOOP (PRINT (EVAL (READ))))</code>, \n"
"Lisp REPL(read-eval-print loop).<p>"

#: in/chapter05.html:52
msgid ""
"<blockquote>\n"
"Actually, your Lisp system does some extra things in its read-eval-print "
"loop: \n"
"<ul>\n"
"<li>it catches all errors to prevent you from inadvertently breaking out of "
"the \n"
"loop\n"
"<li>it provides a controlled way to exit the loop\n"
"<li>it keeps track of the most recently entered expressions, results, and\n"
"printed output\n"
"</ul> \n"
"</blockquote> "
msgstr ""
"<blockquote>\n"
"На самом деле, ваша система Lisp делает некоторые дополнительные вещи в "
"своем цикле read-eval-print:: \n"
"<ul>\n"
"<li>она ловит все ошибки, чтобы вы не могли случайно вырваться из цикла\n"
"<li>она обеспечивает контролируемый способ выхода из цикла\n"
"<li>она отслеживает самые последние введенные выражения, результаты и печать "
"выходных данных\n"
"</ul> \n"
"</blockquote> "

#: in/chapter05.html:54
msgid "<h2>But there's a way out!</h2>"
msgstr "<h2>Но выход есть!</h2>"

#: in/chapter05.html:58
msgid ""
"<p>Most of the time you write a <code>LOOP</code> form, you'd like to have\n"
"a way out. Fortunately, a <code>RETURN</code> form anywhere inside will "
"cause control to leave the <code>LOOP</code>; any value you specify becomes "
"the\n"
"value of the <code>LOOP</code> form:<p>"
msgstr ""
"<p>В большинстве случаев, когда вы пишете форму <code>LOOP</code>, вы "
"хотели \n"
"бы иметь выход. К счастью, форма <code>RETURN</code> в любом месте внутри "
"приведет к тому, что управления покинет  <code>LOOP</code>; любое "
"указанное \n"
"вами значение становится значением формы <code>LOOP</code>:\n"
"<p>"

#: in/chapter05.html:67
msgid ""
"<pre>\n"
"? (loop\n"
"    (print \"Here I am.\")\n"
"    (return 17)\n"
"    (print \"I never got here.\"))\n"
"\"Here I am.\"\n"
"17\n"
"</pre> "
msgstr ""

#: in/chapter05.html:69
msgid "<code>RETURN</code> is normally used in a conditional form, like this:"
msgstr "<code>RETURN</code> обычно используется в условной форме, как здесь:"

#: in/chapter05.html:90
msgid ""
"<pre>\n"
"? (let ((n 0))\n"
"    (loop\n"
"      (when (&gt; n 10) (return))\n"
"      (print n) (prin1 (* n n))\n"
"      (incf n)))\n"
"0 0\n"
"1 1\n"
"2 4\n"
"3 9\n"
"4 16\n"
"5 25\n"
"6 36\n"
"7 49\n"
"8 64\n"
"9 81\n"
"10 100\n"
"NIL\n"
"?\n"
"</pre> "
msgstr ""

#: in/chapter05.html:96
msgid ""
"<p>This example could be done better using a <code>DOTIMES</code>\n"
"form, see below. But the combination of <code>LOOP</code> and\n"
"<code>RETURN</code> offers the flexibility to return from the middle\n"
"of a loop, or even from several places within the loop if need\n"
"be.<p>"
msgstr ""
"<p>Этот пример можно было бы сделать лучше, используя форму <code>DOTIMES</"
"code>,\n"
"см. ниже. Но комбинация <code>LOOP</code> и <code>RETURN</code> "
"обеспечивает\n"
"гибкость для возврата из середины цикла или даже из нескольких мест внутри \n"
"цикла, если это необходимо.\n"
"<p>"

#: in/chapter05.html:98
msgid "<h2>Use DOTIMES for a counted loop</h2>"
msgstr "<h2>Используйте DOTIMES для счетного цикла</h2>"

#: in/chapter05.html:102
msgid ""
"<p>To simply loop for some fixed number of iterations, the\n"
"<code>DOTIMES</code> form is your best choice. The previous example\n"
"simplifies to:<p>"
msgstr ""
"<p>Чтобы просто получить цикл для некоторого фиксированного числа "
"итераций, \n"
"форма <code>DOTIMES</code> - это ваш лучший выбор. Предыдущий пример \n"
"упрощается до:<p>"

#: in/chapter05.html:120
msgid ""
"<pre>\n"
"? (dotimes (n 11)\n"
"    (print n) (prin1 (* n n)))\n"
"0 0\n"
"1 1\n"
"2 4\n"
"3 9\n"
"4 16\n"
"5 25\n"
"6 36\n"
"7 49\n"
"8 64\n"
"9 81\n"
"10 100\n"
"NIL\n"
"?\n"
"</pre> "
msgstr ""

#: in/chapter05.html:123
msgid ""
"<code>DOTIMES</code> always returns NIL (or the result of evaluating\n"
"its optional third argument).</p>"
msgstr ""
"<code>DOTIMES</code> всегда возвращает NIL (или результат вычисления \n"
"его необязательного третьего аргумента).</p>"

#: in/chapter05.html:126
msgid "<h2>Use DOLIST to process elements of a list</h2>"
msgstr "<h2>Используйте DOLIST для обработки элементов списка</h2>"

#: in/chapter05.html:129
msgid ""
"<p>Another common use for iteration is to process each element of a list.\n"
"<code>DOLIST</code> supports this:<p>"
msgstr ""
"<p>Еще одно распространенное применение итерации - обработка каждого "
"элемента\n"
"списка. <code>DOLIST</code> поддерживает это:\n"
"<p>"

#: in/chapter05.html:142
msgid ""
"<pre>\n"
"? (dolist (item '(1 2 4 5 9 17 25))\n"
"    (format t \"~&amp;~D is~:[n't~;~] a perfect square.~%\" item (integerp "
"(sqrt item))))\n"
"1 is a perfect square.\n"
"2 isn't a perfect square.\n"
"4 is a perfect square.\n"
"5 isn't a perfect square.\n"
"9 is a perfect square.\n"
"17 isn't a perfect square.\n"
"25 is a perfect square.\n"
"NIL\n"
"</pre> "
msgstr ""
"<pre>\n"
"? (dolist (item '(1 2 4 5 9 17 25))\n"
"    (format t \"~&amp;~D is~:[n't~;~] a perfect square.~%\" item (integerp "
"(sqrt item))))\n"
"1 is a perfect square.\n"
"2 isn't a perfect square.\n"
"4 is a perfect square.\n"
"5 isn't a perfect square.\n"
"9 is a perfect square.\n"
"17 isn't a perfect square.\n"
"25 is a perfect square.\n"
"NIL\n"
"</pre> \n"
"<p>\n"
"(Прим.Переводчика) этот пример у меня не работает, т.к. sqrt стабильно "
"возвращает float,\n"
"таким образом и integerp никогда не вернет истину, поэтому надо сделать "
"несколько больше преобразований:\n"
"\n"
"<pre> \n"
"(dolist (item '(1 2 4 5 9 17 25))\n"
"  (format t \"~&~D is~:[n't~;~] a perfect square.~%\"\n"
"          item\n"
"          (= 1 (denominator (rational (sqrt item))))))\n"
"</pre> \n"

#: in/chapter05.html:147
msgid ""
"<blockquote> <p>In this example, we've done some fancy things with\n"
"<code>FORMAT</code>. If you want to learn more about what\n"
"<code>FORMAT</code> can do, you should look ahead now to <a\n"
"href=\"chapter24.html\">Chapter 24</a>. </blockquote> "
msgstr ""
"<blockquote> <p>В этом примере мы сделали несколько необычных \n"
"вещей с <code>FORMAT</code>. Если вы хотите узнать больше о том, \n"
"что может сделать <code>FORMAT</code>, вам следует заглянуть в \n"
"<a href=\"chapter24.html\">Главу 24</a>. </blockquote> "

#: in/chapter05.html:150
msgid ""
"<p>The preceding code used a list of numbers, but Lisp allows a\n"
"list to contain any kind of object:<p>"
msgstr ""
"<p>В предыдущем коде использовался список чисел, но Lisp позволяет \n"
"списку хранить любой тип объекта:\n"
"<p>"

#: in/chapter05.html:163
msgid ""
"<pre>\n"
"? (dolist (item `(1 foo \"Hello\" 79.3 2/3 ,#'abs))\n"
"    (format t \"~&amp;~S is a ~A~%\" item (type-of item)))\n"
"1 is a FIXNUM\n"
"FOO is a SYMBOL\n"
"\"Hello\" is a (SIMPLE-BASE-STRING 5)\n"
"79.3 is a DOUBLE-FLOAT\n"
"2/3 is a RATIO\n"
"#&lt;Compiled-function ABS #x1E9CC3E&gt; is a FUNCTION\n"
"NIL\n"
"? \n"
"</pre> "
msgstr ""

#: in/chapter05.html:174
msgid ""
"<blockquote>\n"
"Note how we used the backquote and comma to build the list in this example.\n"
"Do you understand why we did this?  All of the list elements up through\n"
"the ratio <code>2/3</code> are self-evaluating; we could have put them in\n"
"a quoted list as we did in the previous example. But <code>#'abs</code> is\n"
"equivalent to <code>(function abs)</code> which, when quoted, is just a "
"list\n"
"of two symbols. To get the function itself into the quoted list, we had to\n"
"force evaluation of the <code>#'abs</code> form, thus the comma inside the\n"
"backquoted list.\n"
"</blockquote> "
msgstr ""
"<blockquote>\n"
"Обратите внимание, как мы использовали обратную кавычку и запятую для\n"
"построения списка в этом примере. Вы понимаете, почему мы это сделали? \n"
"Все элементы списка вплоть до соотношения <code>2/3</code> являются\n"
"самовычислимыми; мы могли бы поместить их в цитируемый список, как это \n"
"было в предыдущем примере. Но <code>#'abs</code> эквивалентно \n"
"<code>(function abs)</code>, которая, если ее цитировать, представляет \n"
"собой всего лишь список из двух символов. Чтобы получить саму функцию в "
"цитируемом списке, нам пришлось принудительно вычислить форму \n"
"<code>#'abs</code>, используя запятую внутри списка с обратной \n"
"кавычкой.\n"
"</blockquote> "

#: in/chapter05.html:177
msgid ""
"<p>Like <code>DOTIMES</code>, <code>DOLIST</code> always returns\n"
"<code>NIL</code> (or the result of its optional third argument)."
msgstr ""
"<p>Как и <code>DOTIMES</code>, <code>DOLIST</code> всегда \n"
"возвращает NIL (или результат его необязательного третьего аргумента)."

#: in/chapter05.html:180
msgid "<h2>DO is tricky, but powerful</h2>"
msgstr "<h2>DO это сложно, но мощно</h2>"

#: in/chapter05.html:185
msgid ""
"<p>The <code>DO</code> form lets you iterate over multiple variables at the\n"
"same time, using arbitrary forms to step each variable to its next value.\n"
"Here's an example which both iterates over the elements of a list and runs\n"
"a counter at the same time:<p>"
msgstr ""
"<p>Форма <code>DO</code> позволяет выполнять итерацию по нескольким \n"
"переменным одновременно, используя произвольные формы для перехода \n"
"каждой переменной к следующему значению. Вот пример, который одновременно\n"
"выполняет итерацию по элементам списка и запускает счетчик:\n"
"<p>"

#: in/chapter05.html:198
msgid ""
"<pre>\n"
"? (do ((which 1 (1+ which))\n"
"       (list '(foo bar baz qux) (rest list)))\n"
"      ((null list) 'done)\n"
"    (format t \"~&amp;Item ~D is ~S.~%\" which (first list)))\n"
"Item 1 is FOO.\n"
"Item 2 is BAR.\n"
"Item 3 is BAZ.\n"
"Item 4 is QUX.\n"
"DONE\n"
"? \n"
"</pre> "
msgstr ""

#: in/chapter05.html:201
msgid ""
"<p>To understand this better, let's look at the general syntax of\n"
"<code>DO</code>, and relate its parts to the example:"
msgstr ""
"<p>Чтобы лучше понять это, давайте рассмотрим общий синтаксис <code>DO</"
"code>\n"
"и соотнесем его части с примером:"

#: in/chapter05.html:209
msgid ""
"<pre>\n"
"(do ((<i>var1 init1 step1</i>)\n"
"     (<i>var2 init2 step2</i>)\n"
"     <i>...</i>)\n"
"    (<i>end-test result</i>)\n"
"  <i>statement1\n"
"  ...</i>)"
msgstr ""

#: in/chapter05.html:220
msgid ""
"<i>var1</i>       = which\n"
"<i>init1</i>      = 1\n"
"<i>step1</i>      = (1+ which)\n"
"<i>var2</i>       = list\n"
"<i>init2</i>      = '(foo bar baz qux)\n"
"<i>step2</i>      = (rest list)\n"
"<i>end-test</i>   = (null list)\n"
"<i>result</i>     = 'done\n"
"<i>statement1</i> = (format t \"~&amp;Item ~D is ~S.~%\" which (first "
"list))\n"
"</pre> "
msgstr ""

#: in/chapter05.html:233
msgid ""
"<hr>\n"
"<div align=\"center\">\n"
"<a href=\"contents.html\">Contents</a> | <a href=\"cover.html\">Cover</a> "
"<br> \n"
"<a href=\"chapter04.html\">Chapter 4</a> | Chapter 5 | <a href=\"chapter06."
"html\">Chapter 6</a> \n"
"</div>\n"
"<hr>\n"
"<address>\n"
"Copyright &copy; 1995-2001, David B. Lamkins<br>\n"
"All Rights Reserved Worldwide<br>\n"
"<br>\n"
"This book may not be reproduced without the written consent of its author.  "
"Online distribution is restricted to the author's site.\n"
"</address> \n"
"</body> </html> "
msgstr ""
