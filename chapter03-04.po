#
# NuINu <don't@send.my>, 2020.
#
#. extracted from in/chapter03-04.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-19 13:50+0300\n"
"PO-Revision-Date: 2020-05-20 15:55+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in/chapter03-04.html:5
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html><head>\n"
"<title>Successful Lisp - Chapter 3, Lesson 4</title> \n"
"</head> "
msgstr ""

#: in/chapter03-04.html:7
msgid ""
"<body bgcolor=\"white\" text=\"black\"><h1>Chapter 3 - Essential Lisp in "
"Twelve Lessons</h1> "
msgstr ""
"<body bgcolor=\"white\" text=\"black\"><h1>Глава 3 - Основы Лисп в 12 "
"уроках</h1> "

#: in/chapter03-04.html:9
msgid ""
"<h2><A NAME=\"lesson-4\">Lesson 4 - Putting things together, and taking them "
"apart</A></h2> "
msgstr ""
"<h2><A NAME=\"lesson-4\">Урок 4 - Собираем вещи и разбираем их</A></h2> "

#: in/chapter03-04.html:11
msgid "<h3>CONS</h3> "
msgstr ""

#: in/chapter03-04.html:15
msgid ""
"<P><CODE>CONS</CODE> is the most basic <I>cons</I>tructor of lists.  It is \n"
"a function, so it evaluates both of its arguments.  The second argument \n"
"must be a list or <CODE>NIL</CODE>.</P>"
msgstr ""
"<P>\n"
"<CODE>CONS</CODE> - это самый простой <I>конс<.I>труктор списков. Это "
"функция,\n"
"поэтому она вычисляет оба своих аргумента. Вторым аргументом должен \n"
"быть список или  <CODE>NIL</CODE>.\n"
"</P>"

#: in/chapter03-04.html:17
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(cons 1 nil)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> (1)<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN="
"\"BOTTOM\"> (cons 2 (cons 1 nil))<br><IMG SRC=\"gifs/right-arrow.gif\" ALT="
"\"-&gt;\" ALIGN=\"BOTTOM\"> (2 1)<br><br><IMG SRC=\"gifs/circle-dot.gif\" "
"ALT=\"?\" ALIGN=\"BOTTOM\"> (cons 3 (cons 2 (cons 1 nil)))<br><IMG SRC="
"\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> (3 2 1)</PRE>"
msgstr ""

#: in/chapter03-04.html:20
msgid ""
"<P><CODE>CONS</CODE> adds a new item to the beginning of a list.  The \n"
"empty list is equivalent to <CODE>NIL</CODE>,</P>"
msgstr ""
"<P>\n"
"<CODE>CONS</CODE> добавляет новый элемент в начало списка. \n"
"Пустой список эквивалентен  <CODE>NIL</CODE>,\n"
"</P>"

#: in/chapter03-04.html:22
msgid ""
"<PRE WIDTH=80>() <IMG SRC=\"gifs/equivalent.gif\" ALT=\"eqv\" ALIGN=\"BOTTOM"
"\"> NIL</PRE>"
msgstr ""

#: in/chapter03-04.html:24
msgid "<P>so we could also have written:</P>"
msgstr ""
"<P>так что мы тоже могли бы написать:\n"
"</P>"

#: in/chapter03-04.html:26
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(cons 1 ())<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM"
"\"> (1)<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(cons 2 (cons 1 ()))<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" "
"ALIGN=\"BOTTOM\"> (2 1)<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" "
"ALIGN=\"BOTTOM\"> (cons 3 (cons 2 (cons 1 ())))<br><IMG SRC=\"gifs/right-"
"arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> (3 2 1)</PRE>"
msgstr ""

#: in/chapter03-04.html:33
msgid ""
"<BLOCKQUOTE>\n"
"<P>In case you're wondering, yes, there's something special about \n"
"<CODE>NIL</CODE>.  <CODE>NIL</CODE> is one of two symbols in Lisp that \n"
"isn't a keyword but still has itself as its constant value.  <CODE>T</"
"CODE> \n"
"is the other symbol that works like this.</P>"
msgstr ""
"<BLOCKQUOTE>\n"
"<P>\n"
"На случай, если вам интересно, да, есть кое-что особенное в <CODE>NIL</"
"CODE>.  \n"
"<CODE>NIL</CODE> - это один из двух символов в Lisp, который не является \n"
"ключевым словом, но все же имеет свое постоянное значение. \n"
"<CODE>T</CODE> - это еще один символ, который работает так же\n"
"</P>"

#: in/chapter03-04.html:40
msgid ""
"<P>The fact that <CODE>NIL</CODE> evaluates to itself, combined with \n"
"<CODE>()</CODE> <IMG SRC=\"gifs/equivalent.gif\" ALT=\"eqv\" ALIGN=\"BOTTOM"
"\"> \n"
"<CODE>NIL</CODE>, means that you can write <CODE>()</CODE> rather than \n"
"<CODE>(QUOTE ())</CODE>.  Otherwise, Lisp would have to make an exception \n"
"to its evaluation rule to handle the empty list.</P>\n"
"</BLOCKQUOTE>"
msgstr ""
"<P>\n"
"Тот факт, что <CODE>NIL</CODE> вычисляется сам в себя, в сочетании с \n"
"<CODE>()</CODE> <IMG SRC=\"gifs/equivalent.gif\" ALT=\"eqv\" ALIGN=\"BOTTOM"
"\"> \n"
"<CODE>NIL</CODE>, означает, что вы можете написать <CODE>()</CODE>, а не \n"
"<CODE>(QUOTE ())</CODE>. В противном случае Lisp должен был бы сделать \n"
"исключение из своего правила вычислений, чтобы обработать пустой список.\n"
"</P>\n"
"</BLOCKQUOTE>"

#: in/chapter03-04.html:42
msgid "<h3>LIST</h3> "
msgstr ""

#: in/chapter03-04.html:46
msgid ""
"<P>As you may have noticed, building a list out of nested <CODE>CONS</"
"CODE> \n"
"forms can be a bit tedious.  The <CODE>LIST</CODE> form does the same \n"
"thing in a more perspicuous manner:</P>"
msgstr ""
"<P>\n"
"Как вы, возможно, заметили, построение списка из вложенных форм \n"
"<CODE>CONS</CODE> может быть немного утомительным. Форма <CODE>LIST</CODE>\n"
"делает то же самое в более наглядной манере:\n"
"</P>"

#: in/chapter03-04.html:48
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(list 1 2 3)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> (1 2 3)</PRE>"
msgstr ""

#: in/chapter03-04.html:51
msgid ""
"<P><CODE>LIST</CODE> can take any number of arguments.  Because \n"
"<CODE>LIST</CODE> is a function, it evaluates its arguments:</P>"
msgstr ""
"<P>\n"
"<CODE>LIST</CODE> может принимать любое количество аргументов. \n"
"Поскольку <CODE>LIST</CODE>-это функция, она вычисляет свои аргументы:\n"
"</P>"

#: in/chapter03-04.html:53
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(list 1 2 :hello \"there\" 3)<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-"
"&gt;\" ALIGN=\"BOTTOM\"> (1 2 :HELLO \"there\" 3)<br><br><IMG SRC=\"gifs/"
"circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (let ((a :this)<br>        (b :"
"and)<br>        (c :that))<br>     (list a 1 b c 2))<br><IMG SRC=\"gifs/"
"right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> (:THIS 1 :AND :THAT 2)</"
"PRE>"
msgstr ""

#: in/chapter03-04.html:55
msgid "<h3>FIRST and REST</h3> "
msgstr "<h3>FIRST и REST</h3> "

#: in/chapter03-04.html:59
msgid ""
"<P>If you think of a list as being made up of two parts -- the first \n"
"element and everything else -- then you can retrieve any individual "
"element \n"
"of a list using the two operations, <CODE>FIRST</CODE> and <CODE>REST</CODE>."
"</P>"
msgstr ""
"<P>\n"
"Если вы думаете, что список состоит из двух частей - первого элемента \n"
"и всего остального, - то вы можете получить любой отдельный элемент "
"списка, \n"
"используя две операции <CODE>FIRST</CODE> и <CODE>REST</CODE>.\n"
".</P>"

#: in/chapter03-04.html:61
msgid ""
"<PRE WIDTH=80><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> "
"(setq my-list (quote (1 2 3 4 5)))<br><IMG SRC=\"gifs/right-arrow.gif\" ALT="
"\"-&gt;\" ALIGN=\"BOTTOM\"> (1 2 3 4 5)<br><br><IMG SRC=\"gifs/circle-dot.gif"
"\" ALT=\"?\" ALIGN=\"BOTTOM\"> (first my-list)<br><IMG SRC=\"gifs/right-"
"arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> 1<br><br><IMG SRC=\"gifs/circle-"
"dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (rest my-list)<br><IMG SRC=\"gifs/"
"right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> (2 3 4 5)<br><br><IMG SRC="
"\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (first (rest my-"
"list))<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> "
"2<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (rest "
"(rest my-list))<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN="
"\"BOTTOM\"> (3 4 5)<br><br><IMG SRC=\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN="
"\"BOTTOM\"> (first (rest (rest my-list)))<br><IMG SRC=\"gifs/right-arrow.gif"
"\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> 3<br><br><IMG SRC=\"gifs/circle-dot.gif\" "
"ALT=\"?\" ALIGN=\"BOTTOM\"> (rest (rest (rest my-list)))<br><IMG SRC=\"gifs/"
"right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM\"> (4 5)<br><br><IMG SRC="
"\"gifs/circle-dot.gif\" ALT=\"?\" ALIGN=\"BOTTOM\"> (first (rest (rest (rest "
"my-list))))<br><IMG SRC=\"gifs/right-arrow.gif\" ALT=\"-&gt;\" ALIGN=\"BOTTOM"
"\"> 4</PRE>"
msgstr ""

#: in/chapter03-04.html:70
msgid ""
"<P>Clearly, chaining together <CODE>FIRST</CODE> and <CODE>REST</CODE> \n"
"functions could become tedious.  Also, the approach can't work when you \n"
"need to select a particular element when the program runs, or when the "
"list \n"
"is of indeterminate length.  We'll look at how to solve these problems in \n"
"<A HREF=\"chapter04.html\">Chapter 4</A> by defining recursive functions.  \n"
"Later, in <A HREF=\"chapter13.html\">Chapter 13</A>, we'll see the "
"functions \n"
"that Lisp provides to perform selection on the elements of lists and other \n"
"sequences.</P>"
msgstr ""
"<P>\n"
"Очевидно, что связывание в цепочку функций <CODE>FIRST</CODE> и <CODE>REST</"
"CODE\n"
"может стать утомительным. Кроме того, этот подход не может работать, когда \n"
"вам нужно выбрать определенный элемент при запуске программы или когда \n"
"список имеет неопределенную длину. Мы рассмотрим, как решить эти проблемы "
"в \n"
"<A HREF=\"chapter04.html\">Главе 4</A>, определив рекурсивные функции. \n"
"Позже, в <A HREF=\"chapter13.html\">главе 13</A>, мы увидим функции, \n"
"которые предоставляет Lisp для выполнения выбора элементов списков \n"
"и других последовательностей.\n"
"</P>"

#: in/chapter03-04.html:80
msgid ""
"<BLOCKQUOTE>\n"
"<CODE>FIRST</CODE> and <CODE>REST</CODE> are fairly recent additions to \n"
"Lisp, renaming the equivalent functions <CODE>CAR</CODE> and \n"
"<CODE>CDR</CODE>, respectively.  <CODE>CAR</CODE> and <CODE>CDR</CODE> got \n"
"their names from an implementation detail of one of the earliest Lisp \n"
"implementations, and the names persisted for decades despite the fact that \n"
"the underlying implementation had long since changed.\n"
"</BLOCKQUOTE>"
msgstr ""
"<BLOCKQUOTE>\n"
"<CODE>FIRST</CODE> и <CODE>REST</CODE> являются довольно недавними \n"
"дополнениями к Lisp, переименовыая эквивалентные функции <CODE>CAR</CODE>\n"
"и <CODE>CDR</CODE>, соответственно. <CODE>CAR</CODE> и <CODE>CDR</CODE>\n"
"получили свои названия от деталей реализации \n"
"одной из самых ранних реализаций Lisp, и эти названия сохранялись \n"
"в течение десятилетий, несмотря на то, что базовая реализация давно \n"
"изменилась.\n"
"</BLOCKQUOTE>"

#: in/chapter03-04.html:94
msgid ""
"<hr>\n"
"<div align=\"center\">\n"
"<a href=\"contents.html\">Contents</a> | <a href=\"cover.html\">Cover</a> "
"<br> \n"
"<a href=\"chapter02.html\">Chapter 2</a> | <A HREF=\"chapter03.html"
"\">Chapter 3, Introduction</A> |<A HREF=\"chapter03-03.html\">Chapter 3, "
"Lesson 3</A> | Chapter 3, Lesson 4 | <A HREF=\"chapter03-05.html\">Chapter "
"3, Lesson 5</A> | <a href=\"chapter04.html\">Chapter 4</a> | \n"
"</div>\n"
"<hr>\n"
"<address>\n"
"Copyright &copy; 1995-2001, David B. Lamkins<br>\n"
"All Rights Reserved Worldwide<br>\n"
"<br>\n"
"This book may not be reproduced without the written consent of its \n"
"author.  Online distribution is restricted to the author's site.\n"
"</address> \n"
"</body> </html> "
msgstr ""
