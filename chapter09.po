#
# NuINu <don't@send.my>, 2020.
#
#. extracted from in/chapter09.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-19 13:50+0300\n"
"PO-Revision-Date: 2020-05-28 09:48+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in/chapter09.html:5
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/"
"html4/strict.dtd\">\n"
"<html><head>\n"
"<title>Successful Lisp - Chapter 9</title>\n"
"</head> "
msgstr ""

#: in/chapter09.html:8
msgid ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Chapter 9 - Introducing Error Handling and Non-Local Exits</h1> "
msgstr ""
"<body bgcolor=\"white\" text=\"black\">\n"
"<h1>Глава 9 - Введение в Обработку Ошибок и \n"
"Не Локальные Выходы</h1> "

#: in/chapter09.html:11
msgid ""
"<p>In this chapter we'll see some of the specialized control flow\n"
"forms provided by Common Lisp."
msgstr ""
"<p>В этой главе мы рассмотрим некоторые специализированные формы \n"
"управления потоком выполнения, предоставляемые Common Lisp.\n"

#: in/chapter09.html:13
msgid "<h2>UNWIND-PROTECT: When it absolutely, positively has to run</h2>"
msgstr ""
"<h2>UNWIND-PROTECT: когда он(некий важный код) абсолютно, положительно \n"
"должен выполняться</h2>"

#: in/chapter09.html:18
msgid ""
"<p>One of the challenges of writing robust programs is to make sure\n"
"that important parts of your code always run, even in the presence of\n"
"errors. Usually, this is most important when you're allocating,\n"
"using and releasing resources such as files and memory, like this:"
msgstr ""
"<p>\n"
"Одна из проблем написания надежных программ заключается в том, \n"
"чтобы убедиться, что важные части вашего кода всегда выполняются, \n"
"даже при наличии ошибок. Обычно это наиболее важно, когда вы \n"
"выделяете, используете и освобождаете такие ресурсы, как файлы \n"
"и память, например:"

#: in/chapter09.html:29
msgid ""
"<pre>\n"
"<i>; Setup</i> \n"
"Allocate some resources\n"
"Open some files\n"
"<i>; Process</i> \n"
"Process using files and storage (may fail)\n"
"<i>; Cleanup</i> \n"
"Close the files\n"
"Release the resources\n"
"</pre> "
msgstr ""
"<pre>\n"
"<i>; Setup</i> \n"
"Выделить некоторые ресурсы\n"
"Открыть некоторые файлы\n"
"<i>; Process</i> \n"
"Процесс использующий файлы и хранилище (может завершиться неудачно)\n"
"<i>; Cleanup</i> \n"
"Закрыть файлы\n"
"Освободить ресурсы\n"
"</pre> "

#: in/chapter09.html:38
msgid ""
"<p>If the processing step might fail (or be interrupted by the user)\n"
"you should make sure that every possible exit path still goes\n"
"through the cleanup section to close the files and release the\n"
"storage. Better still, your program should be prepared to handle\n"
"errors that occur during the setup phase as you allocate storage and\n"
"open files, since any of these operations might also fail; any\n"
"partially completed setup should still be undone in the cleanup\n"
"section."
msgstr ""
"<p>Если этап обработки может завершиться неудачно \n"
"(или быть прерван пользователем), вы должны убедиться, что все \n"
"возможные пути выхода по-прежнему проходят через раздел очистки, \n"
"чтобы закрыть файлы и освободить хранилище. Более того, ваша \n"
"программа должна быть готова к обработке ошибок, возникающих \n"
"на этапе загрузки, когда вы выделяете хранилище и открываете \n"
"файлы, поскольку любая из этих операций также может завершиться \n"
"неудачей; любая частично завершенная загрузка все равно должна \n"
"быть отменена в разделе очистки."

#: in/chapter09.html:41
msgid ""
"<p>Lisp's <code>UNWIND-PROTECT</code> form makes this especially\n"
"easy to do."
msgstr ""
"<p>Лисп форма <code>UNWIND-PROTECT</code>  позволяет сделать\n"
"это очень легко."

#: in/chapter09.html:52
msgid ""
"<pre>\n"
"(let (resource stream)\n"
"  (unwind-protect\n"
"    (progn\n"
"      (setq resource (allocate-resource)\n"
"            stream (open-file))\n"
"      (process stream resource))\n"
"    (when stream (close stream))\n"
"    (when resource (deallocate resource))))\n"
"</pre> "
msgstr ""

#: in/chapter09.html:60
msgid ""
"<p>Here's what happens. The <code>LET</code> binds\n"
"<code>RESOURCE</code> and <code>STREAM</code> to <code>NIL</code> --\n"
"we'll use the <code>NIL</code> value to mean that there has been no\n"
"resource allocated or file opened. The first form in the\n"
"<code>UNWIND-PROTECT</code> is a \"protected\" form; if control leaves\n"
"the protected form via <em>any</em> means, then the rest of the\n"
"forms -- the \"cleanup\" forms -- are guaranteed to be executed."
msgstr ""
"<p>Вот что здесь происходит. <code>LET</code> привязывает \n"
"<code>RESOURCE</code> и <code>STREAM</code> к <code>NIL</code> - мы будем "
"использовать значение <code>NIL</code>, чтобы обозначить, что не было \n"
"выделено никакого ресурса или не открыт файл. Первая форма в \n"
"<code>UNWIND-PROTECT</code> - это \"защищаемая\" форма; \n"
"если контроль/управление покидает защищаемую форму с помощью \n"
"<em>каких-либо</em> средств, то остальные формы - формы \"очистки\" - \n"
"гарантированно будут выполнены."

#: in/chapter09.html:71
msgid ""
"<p>In our example, the protected form is a <code>PROGN</code> that\n"
"calls <code>ALLOCATE-RESOURCE</code> and <code>OPEN-FILE</code> to\n"
"set our local variables, then <code>PROCESS</code> uses these\n"
"resources. <code>SETQ</code> assigns values sequentially to our\n"
"local variables: <code>(ALLOCATE-RESOURCE)</code> must succeed\n"
"before a value can be assigned to <code>RESOURCE</code>, then\n"
"<code>OPEN-FILE</code> must succeed before its value can be assigned\n"
"to <code>STREAM</code>. A failure (i.e. an interrupt or error) at\n"
"any point in this sequence will transfer control out of the protected\n"
"form."
msgstr ""
"<p>В нашем примере защищенная форма-это <code>PROGN</code>, \n"
"которая вызывает <code>ALLOCATE-RESOURCE</code> и <code>OPEN-FILE</code>\n"
"для установки наших локальных переменных, а затем процесс использует эти\n"
"ресурсы. <code>SETQ</code> присваивает значения последовательно для "
"локальных\n"
"переменных: <code>(ALLOCATE-RESOURCE)</code> должно быть успешным, прежде\n"
"чем значения могут быть присвоены <code>RESOURCE</code>, \n"
"<code>OPEN-FILE</code> должен быть успешным, прежде чем ее значение \n"
"может быть присвоено <code>STREAM</code>. Сбой (т. е. прерывание или "
"ошибка) \n"
"в любой точке этой последовательности приведет к передаче управления \n"
"из защищаемой формы.\n"

#: in/chapter09.html:74
msgid ""
"<p>If the initializations succeed and <code>PROCESS</code> returns\n"
"normally, control continues into the cleanup forms. "
msgstr ""
"<p>Если инициализация проходит успешно и <code>PROCESS</code> возвращается "
"нормально, управление передается в формы очистки. "

#: in/chapter09.html:81
msgid ""
"<p>If anything causes the protected form to exit -- for example, an\n"
"error or an interrupt from the keyboard -- control is transferred\n"
"immediately to the first cleanup form. The cleanup forms are guarded\n"
"by <code>WHEN</code> clauses so we won't try to close the stream or\n"
"deallocate the resource if an error caused them to never be created\n"
"in the first place."
msgstr ""
"<p>Если что-либо вызывает выход защищаемой формы - например, ошибка или\n"
"прерывание с клавиатуры - управление немедленно передается в первую форму\n"
"очистки. Формы очистки защищены предложениями <code>WHEN</code>, поэтому \n"
"мы не будем пытаться закрыть поток или освободить ресурс, если ошибка \n"
"привела к тому, что они никогда не были созданы в первой форме."

#: in/chapter09.html:83
msgid "<h2>Gracious exits with BLOCK and RETURN-FROM</h2>"
msgstr "<h2>Милостивые выходы с BLOCK и RETURN-FROM</h2>"

#: in/chapter09.html:89
msgid ""
"<p>The <code>BLOCK</code> and <code>RETURN-FROM</code> forms give\n"
"you a structured lexical exit from any nested computation. The\n"
"<code>BLOCK</code> form has a name followed a body composed of zero\n"
"or more forms. The <code>RETURN-FROM</code> form expects a block\n"
"name and an optional (the default is <code>NIL</code>) return value."
msgstr ""
"<p>Формы <code>BLOCK</code> и <code>RETURN-FROM</code> дают \n"
"вам структурированный лексический выход из любого вложенного \n"
"вычисления. Форма <code>BLOCK</code> имеет имя, за которым следует \n"
"тело, состоящее из нуля или более форм. Форма <code>RETURN-FROM</code>\n"
"ожидает имя блока и необязательное (по умолчанию - <code>NIL</code>) \n"
"возвращаемое значение."

#: in/chapter09.html:104
msgid ""
"<pre>\n"
"? (defun block-demo (flag)\n"
"    (print 'before-outer)\n"
"    (block outer\n"
"      (print 'before-inner)\n"
"      (print (block inner\n"
"               (if flag\n"
"                 (return-from outer 7)\n"
"                 (return-from inner 3))\n"
"               (print 'never-print-this)))\n"
"      (print 'after-inner)\n"
"      t))\n"
"BLOCK-DEMO\n"
"? (block-demo t)"
msgstr ""

#: in/chapter09.html:109
msgid ""
"BEFORE-OUTER\n"
"BEFORE-INNER\n"
"7\n"
"? (block-demo nil)"
msgstr ""

#: in/chapter09.html:116
msgid ""
"BEFORE-OUTER\n"
"BEFORE-INNER\n"
"3\n"
"AFTER-INNER\n"
"T\n"
"</pre> "
msgstr ""

#: in/chapter09.html:125
msgid ""
"<p>When we call <code>BLOCK-DEMO</code> with <code>T</code>, the\n"
"<code>IF</code> statement's consequent -- <code> (return-from outer\n"
"7)</code> -- immediately returns the value 7 from the <code>(BLOCK\n"
"OUTER ...</code> form. Calling <code>BLOCK-DEMO</code> with\n"
"<code>NIL</code> executes the alternate branch of the\n"
"<code>IF</code> -- <code>(return-from inner 3)</code> -- passing the\n"
"value 3 to the <code>PRINT</code> form wrapped around the\n"
"<code>(BLOCK INNER ...</code> form."
msgstr ""
"<p>Когда мы вызываем <code>BLOCK-DEMO</code> с <code>T</code>, \n"
"последующий оператор <code>IF</code> -- (return-from outer 7) -- немедленно "
"возвращает значение 7 из формы <code>(BLOCK OUTER ...</code>. \n"
"Вызов <code>BLOCK-DEMO</code> c <code>NIL</code> выполняет альтернативную \n"
"ветвь <code>IF</code> -- <code>(return-from inner 3)</code> -- передавая \n"
"значение 3 в форму <code>PRINT</code>, обернутую вокруг формы\n"
"<code>(BLOCK INNER ...</code>."

#: in/chapter09.html:129
msgid ""
"<p>Block names have lexical scope: <code>RETURN-FROM</code>\n"
"transfers control to the <code>innermost</code> <code>BLOCK</code>\n"
"with a matching name."
msgstr ""
"<p>\n"
"Имена блоков имеют лексическую область действия: <code>RETURN-FROM</code>\n"
"передает управление самому внутреннему блоку\n"
"(<code>innermost</code> <code>BLOCK</code>) с соответствующим именем."

#: in/chapter09.html:133
msgid ""
"<p>Some forms implicitly create a block around their body forms.\n"
"When a name is associated with the form, such as with\n"
"<code>DEFUN</code>, the block takes the same name."
msgstr ""
"<p>Некоторые формы неявно создают блок вокруг форм своего тела. \n"
"Когда имя связано с формой, например с <code>DEFUN</code>, \n"
"блок принимает то же самое имя."

#: in/chapter09.html:145
msgid ""
"<pre>\n"
"? (defun block-demo-2 (flag)\n"
"    (when flag\n"
"      (return-from block-demo-2 nil))\n"
"    t)\n"
"BLOCK-DEMO-2\n"
"? (block-demo-2 t)\n"
"NIL\n"
"? (block-demo-2 nil)\n"
"T\n"
"</pre> "
msgstr ""

#: in/chapter09.html:151
msgid ""
"<p>Other forms, such as the simple <code>LOOP</code> and\n"
"<code>DOTIMES</code>, establish a block named <code>NIL</code>\n"
"around their body forms. You can return from a <code>NIL</code>\n"
"block using <code>(RETURN-FROM NIL ...)</code>, or just\n"
"<code>(RETURN ...)</code>."
msgstr ""
"<p>Другие формы, такие как простой <code>LOOP</code> и\n"
"<code>DOTIMES</code>, устанавливают блок с именем NIL вокруг форм \n"
"своего тела. Вы можете вернуться из блока <code>NIL</code> \n"
"с помощью <code>(RETURN-FROM NIL ...)</code>, или просто\n"
"<code>(RETURN ...)</code>."

#: in/chapter09.html:159
msgid ""
"<pre>\n"
"? (let ((i 0))\n"
"    (loop\n"
"      (when (&gt; i 5)\n"
"        (return))\n"
"      (print i)\n"
"      (incf i)))"
msgstr ""

#: in/chapter09.html:171
msgid ""
"0\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"NIL\n"
"? (dotimes (i 10)\n"
"    (when (&gt; i 3)\n"
"      (return t))\n"
"    (print i))"
msgstr ""

#: in/chapter09.html:178
msgid ""
"0\n"
"1\n"
"2\n"
"3\n"
"T\n"
"</pre> "
msgstr ""

#: in/chapter09.html:180
msgid ""
"<h2>Escape from anywhere (but not at any time) with CATCH and THROW</h2>"
msgstr "<h2>Побег из любого места (но не в любое время) с CATCH и THROW</h2>"

#: in/chapter09.html:185
msgid ""
"<p>So <code>BLOCK</code> and <code>RETURN-FROM</code> are handy for\n"
"tranferring control out of nested forms, but they're only useful\n"
"when the exit points (i.e. block names) are lexically visible.  But\n"
"what do you do if you want to break out of a chain of function calls?"
msgstr ""
"<p>Таким образом, <code>BLOCK</code> и <code>RETURN-FROM</code>\n"
"удобны для передачи управления из вложенных форм, но они полезны \n"
"только тогда, когда точки выхода (т. е. имена блоков) лексически \n"
"видны. Но что делать, если вы хотите вырваться/убраться из цепочки вызовов \n"
"функций?"

#: in/chapter09.html:190
msgid ""
"<pre>\n"
"<i>; WARNING! This won't work!</i> \n"
"(defun bad-fn-a ()\n"
"  (bad-fn-b))"
msgstr ""

#: in/chapter09.html:193
msgid ""
"(defun bad-fn-b ()\n"
"  (bad-fn-c))"
msgstr ""

#: in/chapter09.html:197
msgid ""
"(defun bad-fn-c ()\n"
"  (return-from bad-fn-a))  <i>; There is no block BAD-FN-A visible here!</"
"i> \n"
"</pre> "
msgstr ""

#: in/chapter09.html:202
msgid ""
"<p>Enter <code>CATCH</code> and <code>THROW</code>, which let you\n"
"establish control transfers using dynamic scope. Recall that dynamic\n"
"scope follows the chain of active forms, rather than the textual\n"
"enclosure of one form within another of lexical scope."
msgstr ""
"<p>Введите <code>CATCH</code> и <code>THROW</code>, которые позволяют \n"
"установить передачу управления с помощью динамической области видимости.\n"
"Напомним, что динамическая область видимости следует за цепочкой активных \n"
"форм, а не за текстуальной оболочкой одной формы внутри другой \n"
"лексической области видимости."

#: in/chapter09.html:221
msgid ""
"<pre>\n"
"? (defun fn-a ()\n"
"    (catch 'fn-a\n"
"      (print 'before-fn-b-call)\n"
"      (fn-b)\n"
"      (print 'after-fn-b-call)))\n"
"FN-A\n"
"? (defun fn-b ()\n"
"    (print 'before-fn-c-call)\n"
"    (fn-c)\n"
"    (print 'after-fn-c-call))\n"
"FN-B\n"
"?(defun fn-c ()\n"
"   (print 'before-throw)\n"
"   (throw 'fn-a 'done)\n"
"   (print 'after-throw))\n"
"FN-C\n"
"? (fn-a)"
msgstr ""

#: in/chapter09.html:227
msgid ""
"BEFORE-FN-B-CALL \n"
"BEFORE-FN-C-CALL \n"
"BEFORE-THROW \n"
"DONE\n"
"</pre> "
msgstr ""

#: in/chapter09.html:229
msgid "<h2>Making sure files only stay open as long as needed</h2>"
msgstr ""
"<h2>Убедитесь, что файлы остаются открытыми столько, сколько нужно</h2>"

#: in/chapter09.html:234
msgid ""
"<p>Opening a file just long enough to process its data is a very\n"
"common operation. We saw above that <code>UNWIND-PROTECT</code> can\n"
"be used to ensure that the file gets properly closed. As you might\n"
"expect, such a common operation has its own form in Lisp."
msgstr ""
"<p>Открытие файла, чтобы обработать его данные, просто очень длительный \n"
"процесс,  -  очень распространенная операция. Мы видели выше, что \n"
"<code>UNWIND-PROTECT</code> может быть использован для \n"
"обеспечения того, чтобы файл был правильно закрыт. \n"
"Как и следовало ожидать, такая распространенная операция \n"
"имеет свою собственную форму в Lisp."

#: in/chapter09.html:239
msgid ""
"<pre>\n"
"(with-open-file (stream \"file.ext\" :direction :input)\n"
"  (do-something-with-stream stream))\n"
"</pre> "
msgstr ""

#: in/chapter09.html:246
msgid ""
"<p><code>WITH-OPEN-FILE</code> wraps an <code>OPEN</code> and\n"
"<code>CLOSE</code> form around the code you provide, and makes sure\n"
"that the <code>CLOSE</code> gets called at the right time. All of\n"
"the options available to <code>OPEN</code> may be used in\n"
"<code>WITH-OPEN-FILE</code> -- I've shown the options you'd use to\n"
"open a file for input."
msgstr ""
"<p>\n"
"<code>WITH-OPEN-FILE</code> обертывает форму <code>OPEN</code> и \n"
"<code>CLOSE</code> вокруг кода, который вы предоставляете, и \n"
"гарантирует, что <code>CLOSE</code> будет вызвано в нужное время. \n"
"Все опции, доступные для <code>OPEN</code>, могут быть использованы \n"
"в <code>WITH-OPEN-FILE</code> - я показал параметры, которые вы \n"
"использовали бы, чтобы открыть файл для ввода."

#: in/chapter09.html:259
msgid ""
"<hr>\n"
"<div align=\"center\">\n"
"<a href=\"contents.html\">Contents</a> | <a href=\"cover.html\">Cover</a> "
"<br> \n"
"<a href=\"chapter08.html\">Chapter 8</a> | Chapter 9 | <a href=\"chapter10."
"html\">Chapter 10</a> \n"
"</div>\n"
"<hr>\n"
"<address>\n"
"Copyright &copy; 1995-2001, David B. Lamkins<br>\n"
"All Rights Reserved Worldwide<br>\n"
"<br>\n"
"This book may not be reproduced without the written consent of its author.  "
"Online distribution is restricted to the author's site.\n"
"</address> \n"
"</body> </html> "
msgstr ""
